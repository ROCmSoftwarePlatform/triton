// try slice dot and local_load along k to see if memview_subdesc can handle this
// this there could be trouble with swizzling having to read outside of one subview and into another.

#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0)
#mma = #ttg.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx942", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<64x256xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<256x64xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c76_i32 = arith.constant 76 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #blocked1> loc(#loc2)
    %1 = tt.get_program_id x : i32 loc(#loc3)
    %2 = arith.remsi %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.muli %2, %c76_i32 : i32 loc(#loc5)
    %4 = arith.divsi %1, %c8_i32 : i32 loc(#loc6)
    %5 = arith.addi %3, %4 : i32 loc(#loc7)
    %6 = arith.addi %arg5, %c255_i32 : i32 loc(#loc63)
    %7 = arith.divsi %6, %c256_i32 : i32 loc(#loc64)
    %8 = arith.muli %7, %c8_i32 : i32 loc(#loc11)
    %9 = arith.divsi %5, %8 : i32 loc(#loc12)
    %10 = arith.muli %9, %c8_i32 : i32 loc(#loc13)
    %11 = arith.remsi %5, %8 : i32 loc(#loc14)
    %12 = arith.addi %arg4, %c255_i32 : i32 loc(#loc65)
    %13 = arith.divsi %12, %c256_i32 : i32 loc(#loc66)
    %14 = arith.subi %13, %10 : i32 loc(#loc16)
    %15 = arith.minsi %14, %c8_i32 : i32 loc(#loc17)
    %16 = arith.remsi %11, %15 : i32 loc(#loc18)
    %17 = arith.addi %10, %16 : i32 loc(#loc19)
    %18 = arith.muli %17, %c256_i32 : i32 loc(#loc20)
    %19 = tt.splat %18 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc22)
    %21 = arith.addi %19, %20 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc23)
    %23 = tt.splat %arg7 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc24)
    %24 = arith.muli %22, %23 : tensor<256x1xi32, #blocked1> loc(#loc24)
    %25 = tt.addptr %0, %24 : tensor<256x1x!tt.ptr<f16>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc2)
    %26 = tt.broadcast %25 : tensor<256x1x!tt.ptr<f16>, #blocked1> -> tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc25)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %28 = tt.expand_dims %27 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc26)
    %29 = tt.broadcast %28 : tensor<1x64xi32, #blocked1> -> tensor<256x64xi32, #blocked1> loc(#loc25)
    %30 = tt.addptr %26, %29 : tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc25)
    %31 = arith.addi %arg6, %c63_i32 : i32 loc(#loc67)
    %32 = arith.divsi %31, %c64_i32 : i32 loc(#loc68)
    %33 = arith.cmpi sgt, %32, %c0_i32 : i32 loc(#loc28)
    %34 = tt.splat %33 : i1 -> tensor<256x64xi1, #blocked1> loc(#loc28)
    %35 = tt.load %30, %34 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc29)
    %36 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc30)
    %37 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc31)
    %39 = tt.addptr %36, %38 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc30)
    %40 = tt.broadcast %39 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc32)
    %41 = arith.divsi %11, %15 : i32 loc(#loc33)
    %42 = arith.muli %41, %c256_i32 : i32 loc(#loc34)
    %43 = tt.splat %42 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc35)
    %44 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %45 = arith.addi %43, %44 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc35)
    %46 = tt.expand_dims %45 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc36)
    %47 = tt.splat %arg8 : i32 -> tensor<1x256xi32, #blocked> loc(#loc37)
    %48 = arith.muli %46, %47 : tensor<1x256xi32, #blocked> loc(#loc37)
    %49 = tt.broadcast %48 : tensor<1x256xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc32)
    %50 = tt.addptr %40, %49 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc32)
    %51 = tt.splat %33 : i1 -> tensor<64x256xi1, #blocked> loc(#loc28)
    %52 = tt.load %50, %51 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc38)
    %53 = arith.cmpi sgt, %arg7, %c0_i32 : i32 loc(#loc39)
    llvm.intr.assume %53 : i1 loc(#loc40)
    llvm.intr.assume %true : i1 loc(#loc41)
    llvm.intr.assume %true : i1 loc(#loc42)
    %54 = arith.cmpi sgt, %arg8, %c0_i32 : i32 loc(#loc43)
    llvm.intr.assume %54 : i1 loc(#loc44)
    %55 = arith.cmpi sgt, %arg9, %c0_i32 : i32 loc(#loc45)
    llvm.intr.assume %55 : i1 loc(#loc46)
    llvm.intr.assume %true : i1 loc(#loc47)
    %56 = arith.cmpi sgt, %arg10, %c0_i32 : i32 loc(#loc48)
    llvm.intr.assume %56 : i1 loc(#loc49)
    %57 = arith.cmpi sgt, %17, %c0_i32 : i32 loc(#loc50)
    llvm.intr.assume %57 : i1 loc(#loc51)
    %58 = arith.cmpi sgt, %41, %c0_i32 : i32 loc(#loc52)
    llvm.intr.assume %58 : i1 loc(#loc53)
    %59 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %60 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc22)
    %61 = tt.splat %18 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc21)
    %62 = arith.addi %61, %59 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc21)
    %63 = tt.splat %42 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc35)
    %64 = arith.addi %63, %60 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc35)
    %65 = tt.expand_dims %62 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma> loc(#loc23)
    %66 = tt.expand_dims %64 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma> loc(#loc36)
    %67 = ttg.local_alloc  : () -> !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> loc(#loc29)
    %68 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> loc(#loc38)
    %69 = ttg.memdesc_subview %67[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc29)
    ttg.local_store %35, %69 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked1> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc29)
    %70 = ttg.memdesc_subview %68[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc38)
    ttg.local_store %52, %70 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc38)
    %71 = arith.subi %32, %c1_i32 : i32 loc(#loc28)
    %72:9 = scf.for %arg11 = %c0_i32 to %71 step %c1_i32 iter_args(
          %arg12 = %cst,
          %arg13 = %30,
          %arg14 = %50,
          %arg15 = %c0_i32,
          %arg16 = %69,
          %arg17 = %70,
          %arg18 = %cst,
          %arg19 = %cst,
          %arg20 = %cst
          ) -> (
              tensor<128x128xf32, #mma>,
              tensor<256x64x!tt.ptr<f16>, #blocked1>,
              tensor<64x256x!tt.ptr<f16>, #blocked>,
              i32,
              !ttg.memdesc<256x64xf16, #shared, #smem, mutable>,
              !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>,
              tensor<128x128xf32, #mma>,
              tensor<128x128xf32, #mma>,
              tensor<128x128xf32, #mma>) : i32 {
      %86 = tt.addptr %arg13, %cst_1 : tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc54)
      %87 = tt.load %86 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc29)
      %88 = tt.addptr %arg14, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc55)

      // load 1st half of k
      %lA00 = ttg.memdesc_subview %arg16[%c0_i32, %c0_i32] : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable> loc(#loc29)
      %aa89 = ttg.local_load %lA00 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc29)
      %lA10 = ttg.memdesc_subview %arg16[%c128_i32, %c0_i32] : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable> loc(#loc29)
      %ba89 = ttg.local_load %lA10 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc29)
      %lB00 = ttg.memdesc_subview %arg17[%c0_i32, %c0_i32] : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> loc(#loc38)
      %aa90 = ttg.local_load %lB00 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc38)
      %lB10 = ttg.memdesc_subview %arg17[%c0_i32, %c128_i32] : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> loc(#loc38)
      %ba90 = ttg.local_load %lB10 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc38)

      %91 = tt.load %88 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc38)

      // load 2nd half of k
      %lA01 = ttg.memdesc_subview %arg16[%c0_i32, %c32_i32] : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable> loc(#loc29)
      %ab89 = ttg.local_load %lA01 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc29)
      %lA11 = ttg.memdesc_subview %arg16[%c128_i32, %c32_i32] : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable> loc(#loc29)
      %bb89 = ttg.local_load %lA11 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc29)
      %lB01 = ttg.memdesc_subview %arg17[%c32_i32, %c0_i32] : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> loc(#loc38)
      %ab90 = ttg.local_load %lB01 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc38)
      %lB11 = ttg.memdesc_subview %arg17[%c32_i32, %c128_i32] : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> loc(#loc38)
      %bb90 = ttg.local_load %lB11 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc38)

      // 1st half of k
      %aatmp = tt.dot %aa89, %aa90, %arg12 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      %abtmp = tt.dot %aa89, %ba90, %arg18 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      %batmp = tt.dot %ba89, %aa90, %arg19 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      %bbtmp = tt.dot %ba89, %ba90, %arg20 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)

      // 2nd half of k
      %aa92 = tt.dot %ab89, %ab90, %aatmp : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      %ab92 = tt.dot %ab89, %bb90, %abtmp : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      %ba92 = tt.dot %bb89, %ab90, %batmp : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      %bb92 = tt.dot %bb89, %bb90, %bbtmp : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)

      amdgpu.instruction_sched_hint {isBufferLoadsAEnabled = false, isBufferLoadsBEnabled = false, numDsReadsA = #amdgpu.InstCounter<0, none>, numDsReadsB = #amdgpu.InstCounter<0, none>, numDsWritesA = #amdgpu.InstCounter<0, none>, numDsWritesB = #amdgpu.InstCounter<0, none>, numGlobalLoadsA = #amdgpu.InstCounter<0, none>, numGlobalLoadsB = #amdgpu.InstCounter<0, none>, numMMAs = #amdgpu.InstCounter<0, none>} loc(#loc56)
      %93 = arith.addi %arg15, %c1_i32 : i32 loc(#loc28)
      %94 = arith.cmpi slt, %93, %c1_i32 : i32 loc(#loc28)
      %95 = arith.select %94, %93, %c0_i32 : i32 loc(#loc28)
      %96 = ttg.memdesc_subview %67[%95, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc29)
      ttg.local_store %87, %96 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked1> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc29)
      %97 = ttg.memdesc_subview %68[%95, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc38)
      ttg.local_store %91, %97 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc38)
      scf.yield
        %aa92,
        %86,
        %88,
        %95,
        %96,
        %97,
        %ab92,
        %ba92,
        %bb92
          : tensor<128x128xf32, #mma>,
          tensor<256x64x!tt.ptr<f16>, #blocked1>,
          tensor<64x256x!tt.ptr<f16>, #blocked>,
          i32,
          !ttg.memdesc<256x64xf16, #shared, #smem, mutable>,
          !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>,
          tensor<128x128xf32, #mma>,
          tensor<128x128xf32, #mma>,
          tensor<128x128xf32, #mma> loc(#loc28)
    } loc(#loc28)

    // original
    //%76 = scf.if %73 -> (tensor<256x256xf32, #mma>) {
    //%78 = arith.truncf %77 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc57)
    //%79 = tt.splat %arg9 : i32 -> tensor<256x1xi32, #mma> loc(#loc58)
    //%80 = arith.muli %79, %65 : tensor<256x1xi32, #mma> loc(#loc58)
    //%81 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #mma> loc(#loc59)
    //%82 = tt.addptr %81, %80 : tensor<256x1x!tt.ptr<f16>, #mma>, tensor<256x1xi32, #mma> loc(#loc59)
    //%83 = tt.broadcast %82 : tensor<256x1x!tt.ptr<f16>, #mma> -> tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc60)
    //%84 = tt.broadcast %66 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc60)
    //%85 = tt.addptr %83, %84 : tensor<256x256x!tt.ptr<f16>, #mma>, tensor<256x256xi32, #mma> loc(#loc60)
    // tt.store %85, %78 : tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc61)


    ////////////////////////////////////////////////////////////////////////////////
    // AA
    %A0 = ttg.memdesc_subview %67[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable> loc(#loc29)
    %a74 = ttg.local_load %A0 : !ttg.memdesc<128x64xf16, #shared, #smem, mutable> -> tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc29)
    %B0 = ttg.memdesc_subview %68[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared1, #smem, mutable> loc(#loc38)
    %a75 = ttg.local_load %B0 : !ttg.memdesc<64x128xf16, #shared1, #smem, mutable> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc38)
    //%aa72 = amdgpu.extract_slice %72#0 [  0,  0] : tensor<256x256xf32, #mma> to tensor<128x128xf32, #mma>
    %73 = arith.cmpi sge, %32, %c1_i32 : i32 loc(#loc28)
    %aa76 = scf.if %73 -> (tensor<128x128xf32, #mma>) {
      //%86 = tt.dot %74, %75, %72#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      %aa86 = tt.dot %a74, %a75, %72#0 : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      scf.yield %aa86 : tensor<128x128xf32, #mma> loc(#loc56)
    } else {
      //scf.yield %72#0 : tensor<256x256xf32, #mma> loc(#loc56)
      scf.yield %72#0 : tensor<128x128xf32, #mma> loc(#loc56)
    } loc(#loc56)
    %aa78 = arith.truncf %aa76 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc57)
    %a79 = tt.splat %arg9 : i32 -> tensor<128x1xi32, #mma> loc(#loc58)
    %a65 = amdgpu.extract_slice %65 [  0,0] : tensor<256x1xi32, #mma> to tensor<128x1xi32, #mma>
    %a80 = arith.muli %a79, %a65 : tensor<128x1xi32, #mma> loc(#loc58)
    %x81 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>, #mma> loc(#loc59)
    %a82 = tt.addptr %x81, %a80 : tensor<128x1x!tt.ptr<f16>, #mma>, tensor<128x1xi32, #mma> loc(#loc59)
    %a83 = tt.broadcast %a82 : tensor<128x1x!tt.ptr<f16>, #mma> -> tensor<128x128x!tt.ptr<f16>, #mma> loc(#loc60)
    %a66 = amdgpu.extract_slice %66 [0,  0] : tensor<1x256xi32, #mma> to tensor<1x128xi32, #mma>
    %a84 = tt.broadcast %a66 : tensor<1x128xi32, #mma> -> tensor<128x128xi32, #mma> loc(#loc60)
    %aa85 = tt.addptr %a83, %a84 : tensor<128x128x!tt.ptr<f16>, #mma>, tensor<128x128xi32, #mma> loc(#loc60)
    tt.store %aa85, %aa78 : tensor<128x128x!tt.ptr<f16>, #mma> loc(#loc61)


    ////////////////////////////////////////////////////////////////////////////////
    // AB
    %B1 = ttg.memdesc_subview %68[%c0_i32, %c0_i32, %c128_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared1, #smem, mutable> loc(#loc38)
    %b75 = ttg.local_load %B1 : !ttg.memdesc<64x128xf16, #shared1, #smem, mutable> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc38)
    //%ab72 = amdgpu.extract_slice %72#0 [  0,128] : tensor<256x256xf32, #mma> to tensor<128x128xf32, #mma>
    %ab76 = scf.if %73 -> (tensor<128x128xf32, #mma>) {
      //%86 = tt.dot %74, %75, %72#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      %ab86 = tt.dot %a74, %b75, %72#6 : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      scf.yield %ab86 : tensor<128x128xf32, #mma> loc(#loc56)
    } else {
      //scf.yield %72#0 : tensor<256x256xf32, #mma> loc(#loc56)
      scf.yield %72#6 : tensor<128x128xf32, #mma> loc(#loc56)
    } loc(#loc56)
    %ab78 = arith.truncf %ab76 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc57)
    %b66 = amdgpu.extract_slice %66 [0,128] : tensor<1x256xi32, #mma> to tensor<1x128xi32, #mma>
    %b84 = tt.broadcast %b66 : tensor<1x128xi32, #mma> -> tensor<128x128xi32, #mma> loc(#loc60)
    %ab85 = tt.addptr %a83, %b84 : tensor<128x128x!tt.ptr<f16>, #mma>, tensor<128x128xi32, #mma> loc(#loc60)
    tt.store %ab85, %ab78 : tensor<128x128x!tt.ptr<f16>, #mma> loc(#loc61)


    ////////////////////////////////////////////////////////////////////////////////
    // BA
    %A1 = ttg.memdesc_subview %67[%c0_i32, %c128_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable> loc(#loc29)
    %b74 = ttg.local_load %A1 : !ttg.memdesc<128x64xf16, #shared, #smem, mutable> -> tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc29)
    //%ba72 = amdgpu.extract_slice %72#0 [128,  0] : tensor<256x256xf32, #mma> to tensor<128x128xf32, #mma>
    %ba76 = scf.if %73 -> (tensor<128x128xf32, #mma>) {
      //%86 = tt.dot %74, %75, %72#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      %ba86 = tt.dot %b74, %a75, %72#7 : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      scf.yield %ba86 : tensor<128x128xf32, #mma> loc(#loc56)
    } else {
      //scf.yield %72#0 : tensor<256x256xf32, #mma> loc(#loc56)
      scf.yield %72#7 : tensor<128x128xf32, #mma> loc(#loc56)
    } loc(#loc56)
    %ba78 = arith.truncf %ba76 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc57)
    %b79 = tt.splat %arg9 : i32 -> tensor<128x1xi32, #mma> loc(#loc58)
    %b65 = amdgpu.extract_slice %65 [128,0] : tensor<256x1xi32, #mma> to tensor<128x1xi32, #mma>
    %b80 = arith.muli %b79, %b65 : tensor<128x1xi32, #mma> loc(#loc58)
    %b82 = tt.addptr %x81, %b80 : tensor<128x1x!tt.ptr<f16>, #mma>, tensor<128x1xi32, #mma> loc(#loc59)
    %b83 = tt.broadcast %b82 : tensor<128x1x!tt.ptr<f16>, #mma> -> tensor<128x128x!tt.ptr<f16>, #mma> loc(#loc60)
    %ba85 = tt.addptr %b83, %a84 : tensor<128x128x!tt.ptr<f16>, #mma>, tensor<128x128xi32, #mma> loc(#loc60)
    tt.store %ba85, %ba78 : tensor<128x128x!tt.ptr<f16>, #mma> loc(#loc61)


    ////////////////////////////////////////////////////////////////////////////////
    // BB
    //%bb72 = amdgpu.extract_slice %72#0 [128,128] : tensor<256x256xf32, #mma> to tensor<128x128xf32, #mma>
    %bb76 = scf.if %73 -> (tensor<128x128xf32, #mma>) {
      //%86 = tt.dot %74, %75, %72#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      %bb86 = tt.dot %b74, %b75, %72#8 : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x128xf32, #mma> loc(#loc56)
      scf.yield %bb86 : tensor<128x128xf32, #mma> loc(#loc56)
    } else {
      //scf.yield %72#0 : tensor<256x256xf32, #mma> loc(#loc56)
      scf.yield %72#8 : tensor<128x128xf32, #mma> loc(#loc56)
    } loc(#loc56)
    ttg.local_dealloc %67 : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> loc(#loc28)
    ttg.local_dealloc %68 : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> loc(#loc28)
    %bb78 = arith.truncf %bb76 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc57)
    %bb85 = tt.addptr %b83, %b84 : tensor<128x128x!tt.ptr<f16>, #mma>, tensor<128x128xi32, #mma> loc(#loc60)
    tt.store %bb85, %bb78 : tensor<128x128x!tt.ptr<f16>, #mma> loc(#loc61)


    tt.return loc(#loc62)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":130:21)
#loc3 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":95:24)
#loc4 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":105:20)
#loc5 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":108:20)
#loc6 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":106:27)
#loc7 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":108:35)
#loc8 = loc("/home/dtanner/repos/triton/python/triton/language/standard.py":40:22)
#loc9 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":98:27)
#loc10 = loc("/home/dtanner/repos/triton/python/triton/language/standard.py":40:28)
#loc11 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":114:42)
#loc12 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":115:26)
#loc13 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":116:33)
#loc14 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":118:38)
#loc15 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":97:27)
#loc16 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":117:39)
#loc17 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":117:52)
#loc18 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":118:58)
#loc19 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":118:31)
#loc20 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":128:23)
#loc21 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":128:38)
#loc22 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":128:51)
#loc23 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":130:29)
#loc24 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":130:40)
#loc25 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":130:52)
#loc26 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":130:59)
#loc27 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":138:36)
#loc28 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":138:25)
#loc29 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":140:24)
#loc30 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":131:21)
#loc31 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":131:28)
#loc32 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":131:51)
#loc33 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":119:44)
#loc34 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":129:23)
#loc35 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":129:38)
#loc36 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":131:59)
#loc37 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":131:70)
#loc38 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":141:24)
#loc39 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":87:26)
#loc40 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":87:14)
#loc41 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":88:14)
#loc42 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":89:14)
#loc43 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":90:26)
#loc44 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":90:14)
#loc45 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":91:26)
#loc46 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":91:14)
#loc47 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":92:14)
#loc48 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":93:28)
#loc49 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":93:14)
#loc50 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":121:22)
#loc51 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":121:14)
#loc52 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":122:22)
#loc53 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":122:14)
#loc54 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":146:18)
#loc55 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":147:18)
#loc56 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":145:33)
#loc57 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":148:23)
#loc58 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":153:33)
#loc59 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":153:21)
#loc60 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":153:52)
#loc61 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":156:25)
#loc62 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":155:4)
#loc63 = loc(callsite(#loc8 at #loc9))
#loc64 = loc(callsite(#loc10 at #loc9))
#loc65 = loc(callsite(#loc8 at #loc15))
#loc66 = loc(callsite(#loc10 at #loc15))
#loc67 = loc(callsite(#loc8 at #loc27))
#loc68 = loc(callsite(#loc10 at #loc27))
