#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0)
#mma = #ttg.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx942", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_BM256_BN256_BK64_GM4_SK1_nW4_nS2_EU0_kP2_mfma16_schedLOCAL_PREFETCH(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":171:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<64x256xi32, #blocked> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<256x64xi32, #blocked1> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c76_i32 = arith.constant 76 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #blocked1> loc(#loc2)
    %1 = tt.get_program_id x : i32 loc(#loc3)
    %2 = arith.remsi %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.muli %2, %c76_i32 : i32 loc(#loc5)
    %4 = arith.divsi %1, %c8_i32 : i32 loc(#loc6)
    %5 = arith.addi %3, %4 : i32 loc(#loc7)
    %6 = arith.addi %arg4, %c255_i32 : i32 loc(#loc66)
    %7 = arith.divsi %6, %c256_i32 : i32 loc(#loc67)
    %8 = arith.muli %7, %c4_i32 : i32 loc(#loc11)
    %9 = arith.divsi %5, %8 : i32 loc(#loc12)
    %10 = arith.muli %9, %c4_i32 : i32 loc(#loc13)
    %11 = arith.remsi %5, %8 : i32 loc(#loc14)
    %12 = arith.addi %arg3, %c255_i32 : i32 loc(#loc68)
    %13 = arith.divsi %12, %c256_i32 : i32 loc(#loc69)
    %14 = arith.subi %13, %10 : i32 loc(#loc16)
    %15 = arith.minsi %14, %c4_i32 : i32 loc(#loc17)
    %16 = arith.remsi %11, %15 : i32 loc(#loc18)
    %17 = arith.addi %10, %16 : i32 loc(#loc19)
    %18 = arith.muli %17, %c256_i32 : i32 loc(#loc20)
    %19 = tt.splat %18 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc22)
    %21 = arith.addi %19, %20 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc23)
    %23 = tt.splat %arg6 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc24)
    %24 = arith.muli %22, %23 : tensor<256x1xi32, #blocked1> loc(#loc24)
    %25 = tt.addptr %0, %24 : tensor<256x1x!tt.ptr<f16>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc2)
    %26 = tt.broadcast %25 : tensor<256x1x!tt.ptr<f16>, #blocked1> -> tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc25)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %28 = tt.expand_dims %27 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc26)
    %29 = tt.broadcast %28 : tensor<1x64xi32, #blocked1> -> tensor<256x64xi32, #blocked1> loc(#loc25)
    %30 = tt.addptr %26, %29 : tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc25)
    %31 = tt.addptr %30, %cst_1 : tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc27)
    %32 = arith.addi %arg5, %c63_i32 : i32 loc(#loc70)
    %33 = arith.divsi %32, %c64_i32 : i32 loc(#loc71)
    %34 = arith.cmpi sgt, %33, %c0_i32 : i32 loc(#loc29)
    %35 = tt.splat %34 : i1 -> tensor<256x64xi1, #blocked1> loc(#loc29)
    %36 = tt.load %30, %35 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc30)
    %37 = arith.cmpi sgt, %33, %c1_i32 : i32 loc(#loc29)
    %38 = tt.splat %37 : i1 -> tensor<256x64xi1, #blocked1> loc(#loc29)
    %39 = tt.load %31, %38 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc30)
    %40 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc31)
    %41 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc32)
    %43 = tt.addptr %40, %42 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc31)
    %44 = tt.broadcast %43 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc33)
    %45 = arith.divsi %11, %15 : i32 loc(#loc34)
    %46 = arith.muli %45, %c256_i32 : i32 loc(#loc35)
    %47 = tt.splat %46 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc36)
    %48 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %49 = arith.addi %47, %48 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc36)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc37)
    %51 = tt.splat %arg7 : i32 -> tensor<1x256xi32, #blocked> loc(#loc38)
    %52 = arith.muli %50, %51 : tensor<1x256xi32, #blocked> loc(#loc38)
    %53 = tt.broadcast %52 : tensor<1x256xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc33)
    %54 = tt.addptr %44, %53 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc33)
    %55 = tt.addptr %54, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc39)
    %56 = tt.splat %34 : i1 -> tensor<64x256xi1, #blocked> loc(#loc29)
    %57 = tt.load %54, %56 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc40)
    %58 = tt.splat %37 : i1 -> tensor<64x256xi1, #blocked> loc(#loc29)
    %59 = tt.load %55, %58 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc40)
    %60 = arith.cmpi sgt, %arg6, %c0_i32 : i32 loc(#loc41)
    llvm.intr.assume %60 : i1 loc(#loc42)
    llvm.intr.assume %true : i1 loc(#loc43)
    llvm.intr.assume %true : i1 loc(#loc44)
    %61 = arith.cmpi sgt, %arg7, %c0_i32 : i32 loc(#loc45)
    llvm.intr.assume %61 : i1 loc(#loc46)
    %62 = arith.cmpi sgt, %arg8, %c0_i32 : i32 loc(#loc47)
    llvm.intr.assume %62 : i1 loc(#loc48)
    llvm.intr.assume %true : i1 loc(#loc49)
    %63 = arith.cmpi sgt, %arg9, %c0_i32 : i32 loc(#loc50)
    llvm.intr.assume %63 : i1 loc(#loc51)
    %64 = arith.cmpi sgt, %17, %c0_i32 : i32 loc(#loc52)
    llvm.intr.assume %64 : i1 loc(#loc53)
    %65 = arith.cmpi sgt, %45, %c0_i32 : i32 loc(#loc54)
    llvm.intr.assume %65 : i1 loc(#loc55)
    %66 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %67 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc22)
    %68 = tt.splat %18 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc21)
    %69 = arith.addi %68, %66 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc21)
    %70 = tt.splat %46 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc36)
    %71 = arith.addi %70, %67 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc36)
    %72 = tt.expand_dims %69 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma> loc(#loc23)
    %73 = tt.expand_dims %71 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma> loc(#loc37)
    %74 = ttg.local_alloc  : () -> !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> loc(#loc30)
    %75 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> loc(#loc40)
    %76 = ttg.memdesc_subview %74[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc30)
    ttg.local_store %36, %76 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked1> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc30)
    %77 = ttg.memdesc_subview %75[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc40)
    ttg.local_store %57, %77 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc40)
    %78 = ttg.local_load %76 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc30)
    %79 = ttg.local_load %77 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc40)
    %80 = arith.subi %33, %c2_i32 : i32 loc(#loc29)
    %81:8 = scf.for %arg10 = %c0_i32 to %80 step %c1_i32 iter_args(
            %arg11 = %cst,
            %arg12 = %31,
            %arg13 = %55,
            %arg14 = %c0_i32,
            %arg15 = %39,
            %arg16 = %59,
            %arg17 = %78, # pre-fetched A
            %arg18 = %79  # pre-fetched B
            ) -> (tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<64x256x!tt.ptr<f16>, #blocked>, i32, tensor<256x64xf16, #blocked1>, tensor<64x256xf16, #blocked>, tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>>, tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>)  : i32 {
      %110 = arith.addi %arg14, %c1_i32 : i32 loc(#loc29)
      %111 = arith.cmpi slt, %110, %c1_i32 : i32 loc(#loc29)
      %112 = arith.select %111, %110, %c0_i32 : i32 loc(#loc29)
      %113 = ttg.memdesc_subview %74[%112, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc30)
      ttg.local_store %arg15, %113 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked1> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc30)
      %114 = ttg.memdesc_subview %75[%112, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc40)
      ttg.local_store %arg16, %114 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc40)
      %115 = tt.addptr %arg12, %cst_1 : tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc27)
      %116 = tt.load %115 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64x!tt.ptr<f16>, #blocked1> loc(#loc30)
      %117 = tt.addptr %arg13, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc39)
      %118 = tt.load %117 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc40)
      %119 = tt.dot %arg17, %arg18, %arg11 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      amdgpu.instruction_sched_hint {isBufferLoadsAEnabled = false, isBufferLoadsBEnabled = false, numDsReadsA = #amdgpu.InstCounter<0, none>, numDsReadsB = #amdgpu.InstCounter<0, none>, numDsWritesA = #amdgpu.InstCounter<0, none>, numDsWritesB = #amdgpu.InstCounter<0, none>, numGlobalLoadsA = #amdgpu.InstCounter<0, none>, numGlobalLoadsB = #amdgpu.InstCounter<0, none>, numMMAs = #amdgpu.InstCounter<0, none>} loc(#loc56)
      %120 = ttg.local_load %113 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc30)
      %121 = ttg.local_load %114 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc40)
      scf.yield %119, %115, %117, %112, %116, %118, %120, %121 : tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked1>, tensor<64x256x!tt.ptr<f16>, #blocked>, i32, tensor<256x64xf16, #blocked1>, tensor<64x256xf16, #blocked>, tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>>, tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    } loc(#loc29)
    %82 = arith.cmpi sge, %33, %c1_i32 : i32 loc(#loc29)
    %83 = arith.cmpi sge, %33, %c2_i32 : i32 loc(#loc29)
    %84 = arith.addi %81#3, %c1_i32 : i32 loc(#loc29)
    %85 = arith.cmpi slt, %84, %c1_i32 : i32 loc(#loc29)
    %86 = arith.select %85, %84, %c0_i32 : i32 loc(#loc29)
    %87 = ttg.memdesc_subview %74[%86, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc30)
    ttg.local_store %81#4, %87 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked1> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc30)
    %88 = ttg.memdesc_subview %75[%86, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc40)
    ttg.local_store %81#5, %88 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc40)
    %89 = scf.if %82 -> (tensor<256x256xf32, #mma>) {
      %110 = tt.dot %81#6, %81#7, %81#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      scf.yield %110 : tensor<256x256xf32, #mma> loc(#loc56)
    } else {
      scf.yield %81#0 : tensor<256x256xf32, #mma> loc(#loc56)
    } loc(#loc56)
    %90 = ttg.local_load %87 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc30)
    %91 = ttg.local_load %88 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc40)
    %92 = arith.select %82, %89, %81#0 : tensor<256x256xf32, #mma> loc(#loc29)
    %93 = scf.if %83 -> (tensor<256x256xf32, #mma>) {
      %110 = tt.dot %90, %91, %92 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc56)
      scf.yield %110 : tensor<256x256xf32, #mma> loc(#loc56)
    } else {
      scf.yield %92 : tensor<256x256xf32, #mma> loc(#loc56)
    } loc(#loc56)
    %94 = arith.select %83, %93, %92 : tensor<256x256xf32, #mma> loc(#loc29)
    ttg.local_dealloc %74 : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> loc(#loc29)
    ttg.local_dealloc %75 : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> loc(#loc29)
    %95 = arith.truncf %94 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc57)
    %96 = tt.splat %arg8 : i32 -> tensor<256x1xi32, #mma> loc(#loc58)
    %97 = arith.muli %96, %72 : tensor<256x1xi32, #mma> loc(#loc58)
    %98 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #mma> loc(#loc59)
    %99 = tt.addptr %98, %97 : tensor<256x1x!tt.ptr<f16>, #mma>, tensor<256x1xi32, #mma> loc(#loc59)
    %100 = tt.broadcast %99 : tensor<256x1x!tt.ptr<f16>, #mma> -> tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc60)
    %101 = tt.broadcast %73 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc60)
    %102 = tt.addptr %100, %101 : tensor<256x256x!tt.ptr<f16>, #mma>, tensor<256x256xi32, #mma> loc(#loc60)
    %103 = tt.splat %arg3 : i32 -> tensor<256x1xi32, #mma> loc(#loc61)
    %104 = arith.cmpi slt, %72, %103 : tensor<256x1xi32, #mma> loc(#loc61)
    %105 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #mma> loc(#loc62)
    %106 = arith.cmpi slt, %73, %105 : tensor<1x256xi32, #mma> loc(#loc62)
    %107 = tt.broadcast %104 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc63)
    %108 = tt.broadcast %106 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc63)
    %109 = arith.andi %107, %108 : tensor<256x256xi1, #mma> loc(#loc63)
    tt.store %102, %95, %109 : tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc64)
    tt.return loc(#loc65)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":219:21)
#loc3 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":184:24)
#loc4 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":194:20)
#loc5 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":197:20)
#loc6 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":195:27)
#loc7 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":197:35)
#loc8 = loc("/home/dtanner/repos/triton_tot/python/triton/language/standard.py":40:22)
#loc9 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":187:27)
#loc10 = loc("/home/dtanner/repos/triton_tot/python/triton/language/standard.py":40:28)
#loc11 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":203:42)
#loc12 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":204:26)
#loc13 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":205:33)
#loc14 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":207:38)
#loc15 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":186:27)
#loc16 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":206:39)
#loc17 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":206:52)
#loc18 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":207:58)
#loc19 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":207:31)
#loc20 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":217:23)
#loc21 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":217:38)
#loc22 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":217:51)
#loc23 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":219:29)
#loc24 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":219:40)
#loc25 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":219:52)
#loc26 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":219:59)
#loc27 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":234:18)
#loc28 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":226:33)
#loc29 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":226:22)
#loc30 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":228:24)
#loc31 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":220:21)
#loc32 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":220:28)
#loc33 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":220:51)
#loc34 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":208:44)
#loc35 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":218:23)
#loc36 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":218:38)
#loc37 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":220:59)
#loc38 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":220:70)
#loc39 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":235:18)
#loc40 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":229:24)
#loc41 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":176:26)
#loc42 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":176:14)
#loc43 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":177:14)
#loc44 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":178:14)
#loc45 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":179:26)
#loc46 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":179:14)
#loc47 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":180:26)
#loc48 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":180:14)
#loc49 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":181:14)
#loc50 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":182:28)
#loc51 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":182:14)
#loc52 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":210:22)
#loc53 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":210:14)
#loc54 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":211:22)
#loc55 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":211:14)
#loc56 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":233:33)
#loc57 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":236:23)
#loc58 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":241:33)
#loc59 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":241:21)
#loc60 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":241:52)
#loc61 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":242:33)
#loc62 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":242:58)
#loc63 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":242:39)
#loc64 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":244:25)
#loc65 = loc("/home/dtanner/repos/rocm_triton/python/perf-kernels/tools/tune_gemm/output/myKernels.py":243:4)
#loc66 = loc(callsite(#loc8 at #loc9))
#loc67 = loc(callsite(#loc10 at #loc9))
#loc68 = loc(callsite(#loc8 at #loc15))
#loc69 = loc(callsite(#loc10 at #loc15))
#loc70 = loc(callsite(#loc8 at #loc28))
#loc71 = loc(callsite(#loc10 at #loc28))
