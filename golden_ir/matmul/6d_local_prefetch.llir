
/*******************************************************************************

with appropriate masks.
TODO
 - Loop Backedge using setprio
 - Sched.group.barriers in certain groups where idleness is observed.

enum InstructionKindMask {
  NONE =        0x0000, 0
  ALL_ALU =     0x0001, 1
  VALU =        0x0002, 2
  SALU =        0x0004, 4
  MFMA =        0x0008, 8
  ALL_VMEM =    0x0010, 16
  VMEM_READ =   0x0020, 32
  VMEM_WRITE =  0x0040, 64
  ALL_DS =      0x0080, 128
  DS_READ =     0x0100, 256
  DS_WRITE =    0x0200, 512
  TRANSCEND =   0x0400 1024
};

everything but mfmas can cross
2047 - (1+8) = 2038 // verified

everything but lds and mfmas can cross
2047 - (1+8+128+256+512) = 1142

global_load + mfma
2047 - (1+8+16+32+64) = 1926

local + global loads
2047 - (16+32+64+128+256+512) = 1039

mfma + global + local
2047 - (1+8+16+32+64+128+256+512) = 1030

*/


  ;#############################################################################
  ; sched.bar - mfma
  ;tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  ;#############################################################################
  ; sched.bar - mfma+lds
  ;tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59

  ;#############################################################################
  ; sched.bar - mfma+global
  ;tail call void @llvm.amdgcn.sched.barrier(i32 1926), !dbg !59

  ;#############################################################################
  ; sched.bar - lds+global
  ;tail call void @llvm.amdgcn.sched.barrier(i32 1039), !dbg !59

  ;#############################################################################
  ; sched.bar - mfma+lds+global
  ;tail call void @llvm.amdgcn.sched.barrier(i32 1030), !dbg !59

  ;tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ;tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @matmul_kernel(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture writeonly %2, ptr addrspace(1) inreg nocapture readnone %3, i32 inreg %4, i32 inreg %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, ptr addrspace(1) inreg nocapture readnone %11) local_unnamed_addr #0 !dbg !4 {
  %13 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %14 = sdiv i32 %13, 8, !dbg !8
  %15 = mul i32 %13, 76, !dbg !9
  %16 = mul i32 %14, -607, !dbg !9
  %17 = add i32 %16, %15, !dbg !9
  %18 = add i32 %5, 255, !dbg !10
  %19 = sdiv i32 %18, 256, !dbg !14
  %20 = shl nsw i32 %19, 3, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %21 = sdiv i32 %17, %.frozen, !dbg !16
  %22 = shl i32 %21, 3, !dbg !17
  %23 = mul i32 %21, %.frozen, !dbg !18
  %.decomposed = sub i32 %17, %23, !dbg !18
  %24 = add i32 %4, 255, !dbg !19
  %25 = sdiv i32 %24, 256, !dbg !21
  %26 = sub i32 %25, %22, !dbg !22
  %27 = tail call i32 @llvm.smin.i32(i32 %26, i32 8), !dbg !23
  %.decomposed.frozen = freeze i32 %.decomposed, !dbg !24
  %.frozen1039 = freeze i32 %27, !dbg !24
  %28 = sdiv i32 %.decomposed.frozen, %.frozen1039, !dbg !24
  %29 = mul i32 %28, %.frozen1039, !dbg !25
  %.decomposed1040 = sub i32 %.decomposed.frozen, %29, !dbg !25
  %30 = add i32 %.decomposed1040, %22, !dbg !26
  %31 = shl i32 %30, 8, !dbg !27
  %32 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !28
  %33 = lshr i32 %32, 6, !dbg !28
  %34 = lshr i32 %32, 3, !dbg !28
  %35 = and i32 %32, 256, !dbg !28
  %36 = lshr exact i32 %35, 3, !dbg !28
  %37 = and i32 %34, 31, !dbg !28
  %38 = or disjoint i32 %36, %37, !dbg !28
  %39 = or disjoint i32 %38, 64, !dbg !28
  %40 = or disjoint i32 %38, 128, !dbg !28
  %41 = or disjoint i32 %38, 192, !dbg !28
  %42 = or disjoint i32 %31, %38, !dbg !29
  %43 = or disjoint i32 %31, %39, !dbg !29
  %44 = or disjoint i32 %31, %40, !dbg !29
  %45 = or disjoint i32 %31, %41, !dbg !29
  %46 = mul i32 %42, %7, !dbg !30
  %47 = mul i32 %43, %7, !dbg !30
  %48 = mul i32 %44, %7, !dbg !30
  %49 = mul i32 %45, %7, !dbg !30
  %50 = sext i32 %46 to i64, !dbg !31
  %51 = getelementptr half, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = sext i32 %47 to i64, !dbg !31
  %53 = getelementptr half, ptr addrspace(1) %0, i64 %52, !dbg !31
  %54 = sext i32 %48 to i64, !dbg !31
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = sext i32 %49 to i64, !dbg !31
  %57 = getelementptr half, ptr addrspace(1) %0, i64 %56, !dbg !31
  %58 = shl i32 %32, 3, !dbg !32
  %59 = and i32 %58, 56, !dbg !32
  %60 = zext nneg i32 %59 to i64, !dbg !33
  %61 = getelementptr half, ptr addrspace(1) %51, i64 %60, !dbg !33
  %62 = getelementptr half, ptr addrspace(1) %53, i64 %60, !dbg !33
  %63 = getelementptr half, ptr addrspace(1) %55, i64 %60, !dbg !33
  %64 = getelementptr half, ptr addrspace(1) %57, i64 %60, !dbg !33
  %65 = add i32 %6, 63, !dbg !34
  %66 = icmp sgt i32 %65, 63, !dbg !36
  %67 = insertelement <8 x i1> poison, i1 %66, i64 0, !dbg !37
  %68 = shufflevector <8 x i1> %67, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !37
  %69 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %61, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !37
  %70 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %62, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !37
  %71 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %63, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !37
  %72 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %64, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !37
  %73 = getelementptr half, ptr addrspace(1) %1, i64 %60, !dbg !38
  %74 = shl i32 %28, 8, !dbg !39
  %75 = or disjoint i32 %74, %38, !dbg !40
  %76 = or disjoint i32 %74, %39, !dbg !40
  %77 = or disjoint i32 %74, %40, !dbg !40
  %78 = or disjoint i32 %74, %41, !dbg !40
  %79 = mul i32 %75, %8, !dbg !41
  %80 = mul i32 %76, %8, !dbg !41
  %81 = mul i32 %77, %8, !dbg !41
  %82 = mul i32 %78, %8, !dbg !41
  %83 = sext i32 %79 to i64, !dbg !42
  %84 = getelementptr half, ptr addrspace(1) %73, i64 %83, !dbg !42
  %85 = sext i32 %80 to i64, !dbg !42
  %86 = getelementptr half, ptr addrspace(1) %73, i64 %85, !dbg !42
  %87 = sext i32 %81 to i64, !dbg !42
  %88 = getelementptr half, ptr addrspace(1) %73, i64 %87, !dbg !42
  %89 = sext i32 %82 to i64, !dbg !42
  %90 = getelementptr half, ptr addrspace(1) %73, i64 %89, !dbg !42
  %91 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %84, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !43
  %92 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %86, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !43
  %93 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %88, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !43
  %94 = tail call <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) %90, i32 16, <8 x i1> %68, <8 x half> zeroinitializer), !dbg !43
  %95 = icmp sgt i32 %7, 0, !dbg !44
  tail call void @llvm.assume(i1 %95), !dbg !45
  %96 = icmp sgt i32 %8, 0, !dbg !46
  tail call void @llvm.assume(i1 %96), !dbg !47
  %97 = icmp sgt i32 %9, 0, !dbg !48
  tail call void @llvm.assume(i1 %97), !dbg !49
  %98 = icmp sgt i32 %10, 0, !dbg !50
  tail call void @llvm.assume(i1 %98), !dbg !51
  %99 = icmp sgt i32 %30, 0, !dbg !52
  tail call void @llvm.assume(i1 %99), !dbg !53
  %100 = icmp sgt i32 %28, 0, !dbg !54
  tail call void @llvm.assume(i1 %100), !dbg !55
  %101 = xor i32 %58, %32, !dbg !37
  %102 = and i32 %101, 56, !dbg !37
  %103 = shl nuw nsw i32 %38, 6, !dbg !37
  %104 = or disjoint i32 %103, %102, !dbg !37
  %105 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %104, !dbg !37
  store <8 x half> %69, ptr addrspace(3) %105, align 16, !dbg !37
  %106 = and i32 %34, 31, !dbg !37
  %107 = or disjoint i32 %106, %36, !dbg !37
  %108 = shl nuw nsw i32 %107, 6, !dbg !37
  %109 = or disjoint i32 %108, %102, !dbg !37
  %110 = or disjoint i32 %109, 4096, !dbg !37
  %111 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %110, !dbg !37
  store <8 x half> %70, ptr addrspace(3) %111, align 16, !dbg !37
  %112 = or disjoint i32 %109, 8192, !dbg !37
  %113 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %112, !dbg !37
  store <8 x half> %71, ptr addrspace(3) %113, align 16, !dbg !37
  %114 = or disjoint i32 %109, 12288, !dbg !37
  %115 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %114, !dbg !37
  store <8 x half> %72, ptr addrspace(3) %115, align 16, !dbg !37
  %116 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %104, !dbg !43
  store <8 x half> %91, ptr addrspace(3) %116, align 16, !dbg !43
  %117 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %110, !dbg !43
  store <8 x half> %92, ptr addrspace(3) %117, align 16, !dbg !43
  %118 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %112, !dbg !43
  store <8 x half> %93, ptr addrspace(3) %118, align 16, !dbg !43
  %119 = getelementptr inbounds half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %114, !dbg !43
  store <8 x half> %94, ptr addrspace(3) %119, align 16, !dbg !43
  %120 = icmp sgt i32 %65, 127, !dbg !36
  br i1 %120, label %.lr.ph, label %._crit_edge, !dbg !36

.lr.ph:                                           ; preds = %12
  %121 = lshr i32 %65, 6, !dbg !56
  %122 = lshr i32 %32, 4
  %123 = and i32 %122, 16
  %124 = and i32 %32, 15
  %125 = lshr i32 %32, 1
  %126 = and i32 %125, 24
  %127 = or disjoint i32 %123, %124
  %128 = or disjoint i32 %126, 32
  %129 = xor i32 %126, %59
  %130 = shl nuw nsw i32 %127, 6
  %131 = or disjoint i32 %130, %129
  %132 = xor i32 %128, %59
  %133 = or disjoint i32 %130, %132
  %134 = or disjoint i32 %131, 2048
  %135 = or disjoint i32 %133, 2048
  %136 = or disjoint i32 %131, 4096
  %137 = or disjoint i32 %133, 4096
  %138 = or disjoint i32 %131, 6144
  %139 = or disjoint i32 %133, 6144
  %140 = or disjoint i32 %131, 8192
  %141 = or disjoint i32 %133, 8192
  %142 = or disjoint i32 %131, 10240
  %143 = or disjoint i32 %133, 10240
  %144 = or disjoint i32 %131, 12288
  %145 = or disjoint i32 %133, 12288
  %146 = or disjoint i32 %131, 14336
  %147 = or disjoint i32 %133, 14336
  ; local memory addresses
  %148 = getelementptr half, ptr addrspace(3) @global_smem, i32 %131
  %149 = getelementptr half, ptr addrspace(3) @global_smem, i32 %133
  %150 = getelementptr half, ptr addrspace(3) @global_smem, i32 %134
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i32 %135
  %152 = getelementptr half, ptr addrspace(3) @global_smem, i32 %136
  %153 = getelementptr half, ptr addrspace(3) @global_smem, i32 %137
  %154 = getelementptr half, ptr addrspace(3) @global_smem, i32 %138
  %155 = getelementptr half, ptr addrspace(3) @global_smem, i32 %139
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i32 %140
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i32 %141
  %158 = getelementptr half, ptr addrspace(3) @global_smem, i32 %142
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i32 %143
  %160 = getelementptr half, ptr addrspace(3) @global_smem, i32 %144
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i32 %145
  %162 = getelementptr half, ptr addrspace(3) @global_smem, i32 %146
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i32 %147
  %164 = shl nuw nsw i32 %33, 4
  %165 = and i32 %164, 48
  %166 = or disjoint i32 %165, %124
  %167 = shl nuw nsw i32 %166, 6
  %168 = or disjoint i32 %167, %129
  %169 = or disjoint i32 %167, %132
  %170 = or disjoint i32 %168, 4096
  %171 = or disjoint i32 %169, 4096
  %172 = or disjoint i32 %168, 8192
  %173 = or disjoint i32 %169, 8192
  %174 = or disjoint i32 %168, 12288
  %175 = or disjoint i32 %169, 12288
  ; local memory addresses
  %176 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %168
  %177 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %169
  %178 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %170
  %179 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %171
  %180 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %172
  %181 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %173
  %182 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %174
  %183 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %175
  %184 = add nsw i32 %121, -2

  fence syncscope("workgroup") release, !dbg !37
  tail call void @llvm.amdgcn.s.barrier(), !dbg !37
  fence syncscope("workgroup") acquire, !dbg !37

  ; Local Prefetch before loop
  ; A0 K0
  %185 = load <8 x half>, ptr addrspace(3) %176, align 16, !dbg !43
  %186 = shufflevector <8 x half> %185, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %187 = shufflevector <8 x half> %185, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  ; B0 K0
  %188 = load <8 x half>, ptr addrspace(3) %148, align 16, !dbg !37
  %189 = shufflevector <8 x half> %188, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %190 = shufflevector <8 x half> %188, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  ; A1 K0
  %191 = load <8 x half>, ptr addrspace(3) %178, align 16, !dbg !43
  %192 = shufflevector <8 x half> %191, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %193 = shufflevector <8 x half> %191, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B1 K0
  %194 = load <8 x half>, ptr addrspace(3) %150, align 16, !dbg !37
  %195 = shufflevector <8 x half> %194, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %196 = shufflevector <8 x half> %194, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ; Done Before Loop
  br label %197, !dbg !36

197:                                              ; preds = %.lr.ph, %191
  %.pn79143 = phi ptr addrspace(1) [ %90, %.lr.ph ], [ %432, %197 ]
  %.pn95142 = phi ptr addrspace(1) [ %88, %.lr.ph ], [ %431, %197 ]
  %.pn111141 = phi ptr addrspace(1) [ %86, %.lr.ph ], [ %400, %197 ]
  %.pn127140 = phi ptr addrspace(1) [ %84, %.lr.ph ], [ %399, %197 ]
  %.pn15139 = phi ptr addrspace(1) [ %64, %.lr.ph ], [ %368, %197 ]
  %.pn31138 = phi ptr addrspace(1) [ %63, %.lr.ph ], [ %367, %197 ]
  %.pn47137 = phi ptr addrspace(1) [ %62, %.lr.ph ], [ %336, %197 ]
  %.pn63136 = phi ptr addrspace(1) [ %61, %.lr.ph ], [ %335, %197 ]
  %198 = phi float [ 0.000000e+00, %.lr.ph ], [ %585, %197 ]
  %199 = phi float [ 0.000000e+00, %.lr.ph ], [ %586, %197 ]
  %200 = phi float [ 0.000000e+00, %.lr.ph ], [ %587, %197 ]
  %201 = phi float [ 0.000000e+00, %.lr.ph ], [ %588, %197 ]
  %202 = phi float [ 0.000000e+00, %.lr.ph ], [ %591, %197 ]
  %203 = phi float [ 0.000000e+00, %.lr.ph ], [ %592, %197 ]
  %204 = phi float [ 0.000000e+00, %.lr.ph ], [ %593, %197 ]
  %205 = phi float [ 0.000000e+00, %.lr.ph ], [ %594, %197 ]
  %206 = phi float [ 0.000000e+00, %.lr.ph ], [ %609, %197 ]
  %207 = phi float [ 0.000000e+00, %.lr.ph ], [ %610, %197 ]
  %208 = phi float [ 0.000000e+00, %.lr.ph ], [ %611, %197 ]
  %209 = phi float [ 0.000000e+00, %.lr.ph ], [ %612, %197 ]
  %210 = phi float [ 0.000000e+00, %.lr.ph ], [ %615, %197 ]
  %211 = phi float [ 0.000000e+00, %.lr.ph ], [ %616, %197 ]
  %212 = phi float [ 0.000000e+00, %.lr.ph ], [ %617, %197 ]
  %213 = phi float [ 0.000000e+00, %.lr.ph ], [ %618, %197 ]
  %214 = phi float [ 0.000000e+00, %.lr.ph ], [ %597, %197 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %598, %197 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %599, %197 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %600, %197 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %603, %197 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %604, %197 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %605, %197 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %606, %197 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %621, %197 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %622, %197 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %623, %197 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %624, %197 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %627, %197 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %628, %197 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %629, %197 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %630, %197 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %639, %197 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %640, %197 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %641, %197 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %642, %197 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %645, %197 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %646, %197 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %647, %197 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %648, %197 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %669, %197 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %670, %197 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %671, %197 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %672, %197 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %675, %197 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %676, %197 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %677, %197 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %678, %197 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %651, %197 ]
  %247 = phi float [ 0.000000e+00, %.lr.ph ], [ %652, %197 ]
  %248 = phi float [ 0.000000e+00, %.lr.ph ], [ %653, %197 ]
  %249 = phi float [ 0.000000e+00, %.lr.ph ], [ %654, %197 ]
  %250 = phi float [ 0.000000e+00, %.lr.ph ], [ %657, %197 ]
  %251 = phi float [ 0.000000e+00, %.lr.ph ], [ %658, %197 ]
  %252 = phi float [ 0.000000e+00, %.lr.ph ], [ %659, %197 ]
  %253 = phi float [ 0.000000e+00, %.lr.ph ], [ %660, %197 ]
  %254 = phi float [ 0.000000e+00, %.lr.ph ], [ %681, %197 ]
  %255 = phi float [ 0.000000e+00, %.lr.ph ], [ %682, %197 ]
  %256 = phi float [ 0.000000e+00, %.lr.ph ], [ %683, %197 ]
  %257 = phi float [ 0.000000e+00, %.lr.ph ], [ %684, %197 ]
  %258 = phi float [ 0.000000e+00, %.lr.ph ], [ %687, %197 ]
  %259 = phi float [ 0.000000e+00, %.lr.ph ], [ %688, %197 ]
  %260 = phi float [ 0.000000e+00, %.lr.ph ], [ %689, %197 ]
  %261 = phi float [ 0.000000e+00, %.lr.ph ], [ %690, %197 ]
  %262 = phi float [ 0.000000e+00, %.lr.ph ], [ %693, %197 ]
  %263 = phi float [ 0.000000e+00, %.lr.ph ], [ %694, %197 ]
  %264 = phi float [ 0.000000e+00, %.lr.ph ], [ %695, %197 ]
  %265 = phi float [ 0.000000e+00, %.lr.ph ], [ %696, %197 ]
  %266 = phi float [ 0.000000e+00, %.lr.ph ], [ %699, %197 ]
  %267 = phi float [ 0.000000e+00, %.lr.ph ], [ %700, %197 ]
  %268 = phi float [ 0.000000e+00, %.lr.ph ], [ %701, %197 ]
  %269 = phi float [ 0.000000e+00, %.lr.ph ], [ %702, %197 ]
  %270 = phi float [ 0.000000e+00, %.lr.ph ], [ %717, %197 ]
  %271 = phi float [ 0.000000e+00, %.lr.ph ], [ %718, %197 ]
  %272 = phi float [ 0.000000e+00, %.lr.ph ], [ %719, %197 ]
  %273 = phi float [ 0.000000e+00, %.lr.ph ], [ %720, %197 ]
  %274 = phi float [ 0.000000e+00, %.lr.ph ], [ %723, %197 ]
  %275 = phi float [ 0.000000e+00, %.lr.ph ], [ %724, %197 ]
  %276 = phi float [ 0.000000e+00, %.lr.ph ], [ %725, %197 ]
  %277 = phi float [ 0.000000e+00, %.lr.ph ], [ %726, %197 ]
  %278 = phi float [ 0.000000e+00, %.lr.ph ], [ %705, %197 ]
  %279 = phi float [ 0.000000e+00, %.lr.ph ], [ %706, %197 ]
  %280 = phi float [ 0.000000e+00, %.lr.ph ], [ %707, %197 ]
  %281 = phi float [ 0.000000e+00, %.lr.ph ], [ %708, %197 ]
  %282 = phi float [ 0.000000e+00, %.lr.ph ], [ %711, %197 ]
  %283 = phi float [ 0.000000e+00, %.lr.ph ], [ %712, %197 ]
  %284 = phi float [ 0.000000e+00, %.lr.ph ], [ %713, %197 ]
  %285 = phi float [ 0.000000e+00, %.lr.ph ], [ %714, %197 ]
  %286 = phi float [ 0.000000e+00, %.lr.ph ], [ %729, %197 ]
  %287 = phi float [ 0.000000e+00, %.lr.ph ], [ %730, %197 ]
  %288 = phi float [ 0.000000e+00, %.lr.ph ], [ %731, %197 ]
  %289 = phi float [ 0.000000e+00, %.lr.ph ], [ %732, %197 ]
  %290 = phi float [ 0.000000e+00, %.lr.ph ], [ %735, %197 ]
  %291 = phi float [ 0.000000e+00, %.lr.ph ], [ %736, %197 ]
  %292 = phi float [ 0.000000e+00, %.lr.ph ], [ %737, %197 ]
  %293 = phi float [ 0.000000e+00, %.lr.ph ], [ %738, %197 ]
  %294 = phi float [ 0.000000e+00, %.lr.ph ], [ %741, %197 ]
  %295 = phi float [ 0.000000e+00, %.lr.ph ], [ %742, %197 ]
  %296 = phi float [ 0.000000e+00, %.lr.ph ], [ %743, %197 ]
  %297 = phi float [ 0.000000e+00, %.lr.ph ], [ %744, %197 ]
  %298 = phi float [ 0.000000e+00, %.lr.ph ], [ %747, %197 ]
  %299 = phi float [ 0.000000e+00, %.lr.ph ], [ %748, %197 ]
  %300 = phi float [ 0.000000e+00, %.lr.ph ], [ %749, %197 ]
  %301 = phi float [ 0.000000e+00, %.lr.ph ], [ %750, %197 ]
  %302 = phi float [ 0.000000e+00, %.lr.ph ], [ %777, %197 ]
  %303 = phi float [ 0.000000e+00, %.lr.ph ], [ %778, %197 ]
  %304 = phi float [ 0.000000e+00, %.lr.ph ], [ %779, %197 ]
  %305 = phi float [ 0.000000e+00, %.lr.ph ], [ %780, %197 ]
  %306 = phi float [ 0.000000e+00, %.lr.ph ], [ %783, %197 ]
  %307 = phi float [ 0.000000e+00, %.lr.ph ], [ %784, %197 ]
  %308 = phi float [ 0.000000e+00, %.lr.ph ], [ %785, %197 ]
  %309 = phi float [ 0.000000e+00, %.lr.ph ], [ %786, %197 ]
  %310 = phi float [ 0.000000e+00, %.lr.ph ], [ %753, %197 ]
  %311 = phi float [ 0.000000e+00, %.lr.ph ], [ %754, %197 ]
  %312 = phi float [ 0.000000e+00, %.lr.ph ], [ %755, %197 ]
  %313 = phi float [ 0.000000e+00, %.lr.ph ], [ %756, %197 ]
  %314 = phi float [ 0.000000e+00, %.lr.ph ], [ %759, %197 ]
  %315 = phi float [ 0.000000e+00, %.lr.ph ], [ %760, %197 ]
  %316 = phi float [ 0.000000e+00, %.lr.ph ], [ %761, %197 ]
  %317 = phi float [ 0.000000e+00, %.lr.ph ], [ %762, %197 ]
  %318 = phi float [ 0.000000e+00, %.lr.ph ], [ %789, %197 ]
  %319 = phi float [ 0.000000e+00, %.lr.ph ], [ %790, %197 ]
  %320 = phi float [ 0.000000e+00, %.lr.ph ], [ %791, %197 ]
  %321 = phi float [ 0.000000e+00, %.lr.ph ], [ %792, %197 ]
  %322 = phi float [ 0.000000e+00, %.lr.ph ], [ %795, %197 ]
  %323 = phi float [ 0.000000e+00, %.lr.ph ], [ %796, %197 ]
  %324 = phi float [ 0.000000e+00, %.lr.ph ], [ %797, %197 ]
  %325 = phi float [ 0.000000e+00, %.lr.ph ], [ %798, %197 ]
  %326 = phi i32 [ 0, %.lr.ph ], [ %799, %197 ]

  ; Live-in Local Prefetch
  %327 = phi <4 x half> [ %186, %.lr.ph ], [ %764, %197 ]
  %328 = phi <4 x half> [ %187, %.lr.ph ], [ %765, %197 ]
  %329 = phi <4 x half> [ %189, %.lr.ph ], [ %767, %197 ]
  %330 = phi <4 x half> [ %190, %.lr.ph ], [ %768, %197 ]

  %331 = phi <4 x half> [ %192, %.lr.ph ], [ %770, %197 ]
  %332 = phi <4 x half> [ %193, %.lr.ph ], [ %771, %197 ]
  %333 = phi <4 x half> [ %195, %.lr.ph ], [ %773, %197 ]
  %334 = phi <4 x half> [ %196, %.lr.ph ], [ %774, %197 ]

  ;#############################################################################
  ; Begin Loop
  ;#############################################################################

  call void @llvm.amdgcn.s.setprio(i16 3), !dbg !36

  ;####################
  ; Load A 01 K0 pref=0
  ; Load B 01 K0 pref=0
  ; A0 K0
  ;%321 = load <8 x half>, ptr addrspace(3) %176, align 16, !dbg !43
  ;%322 = shufflevector <8 x half> %321, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  ;%323 = shufflevector <8 x half> %321, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  ; B0 K0
  ;%324 = load <8 x half>, ptr addrspace(3) %148, align 16, !dbg !37
  ;%325 = shufflevector <8 x half> %324, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  ;%326 = shufflevector <8 x half> %324, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59

  ; A1 K0
  ;%325 = load <8 x half>, ptr addrspace(3) %178, align 16, !dbg !43
  ;%326 = shufflevector <8 x half> %325, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  ;%327 = shufflevector <8 x half> %325, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  ; B1 K0
  ;%328 = load <8 x half>, ptr addrspace(3) %150, align 16, !dbg !37
  ;%329 = shufflevector <8 x half> %328, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  ;%330 = shufflevector <8 x half> %328, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1039), !dbg !47 ; lds+global

  ; global_load[0]
  %335 = getelementptr i8, ptr addrspace(1) %.pn63136, i64 128, !dbg !57
  %unmaskedload = load <8 x half>, ptr addrspace(1) %335, align 16, !dbg !37
  ; global_load[1]
  %336 = getelementptr i8, ptr addrspace(1) %.pn47137, i64 128, !dbg !57
  %unmaskedload128 = load <8 x half>, ptr addrspace(1) %336, align 16, !dbg !37

  tail call void @llvm.amdgcn.sched.barrier(i32 1039), !dbg !59 ; lds+global

  ;####################
  ; Load A 23 K0 pref=1
  ; A2 K0
  %337 = load <8 x half>, ptr addrspace(3) %180, align 16, !dbg !43
  %338 = shufflevector <8 x half> %337, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %339 = shufflevector <8 x half> %337, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  ; A3 K0
  %340 = load <8 x half>, ptr addrspace(3) %182, align 16, !dbg !43
  %341 = shufflevector <8 x half> %340, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %342 = shufflevector <8 x half> %340, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59

  ;#############################################################################
  ; mfma tile m=0,n=0,k=0
  %343 = insertelement <4 x float> poison, float %198, i64 0, !dbg !59
  %344 = insertelement <4 x float> %343, float %199, i64 1, !dbg !59
  %345 = insertelement <4 x float> %344, float %200, i64 2, !dbg !59
  %346 = insertelement <4 x float> %345, float %201, i64 3, !dbg !59
  %347 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %329, <4 x float> %346, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %348 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %330, <4 x float> %347, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %349 = insertelement <4 x float> poison, float %202, i64 0, !dbg !59
  %350 = insertelement <4 x float> %349, float %203, i64 1, !dbg !59
  %351 = insertelement <4 x float> %350, float %204, i64 2, !dbg !59
  %352 = insertelement <4 x float> %351, float %205, i64 3, !dbg !59
  %353 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %329, <4 x float> %352, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %354 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %330, <4 x float> %353, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %355 = insertelement <4 x float> poison, float %214, i64 0, !dbg !59
  %356 = insertelement <4 x float> %355, float %215, i64 1, !dbg !59
  %357 = insertelement <4 x float> %356, float %216, i64 2, !dbg !59
  %358 = insertelement <4 x float> %357, float %217, i64 3, !dbg !59
  %359 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %333, <4 x float> %358, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %360 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %334, <4 x float> %359, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %361 = insertelement <4 x float> poison, float %218, i64 0, !dbg !59
  %362 = insertelement <4 x float> %361, float %219, i64 1, !dbg !59
  %363 = insertelement <4 x float> %362, float %220, i64 2, !dbg !59
  %364 = insertelement <4 x float> %363, float %221, i64 3, !dbg !59
  %365 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %333, <4 x float> %364, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %366 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %334, <4 x float> %365, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 0
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 1
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 2
  tail call void @llvm.amdgcn.sched.group.barrier(i32  16, i32 1, i32 0), !dbg !47 ; global
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 3
  tail call void @llvm.amdgcn.sched.group.barrier(i32  16, i32 1, i32 0), !dbg !47 ; global
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 4
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 5
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 2, i32 0), !dbg !47 ; mfma 6-7

  tail call void @llvm.amdgcn.sched.barrier(i32 1030), !dbg !59 ; mfma+lds+global

  ; global_load[2]
  %367 = getelementptr i8, ptr addrspace(1) %.pn31138, i64 128, !dbg !57
  %unmaskedload129 = load <8 x half>, ptr addrspace(1) %367, align 16, !dbg !37
  ; global_load[3]
  %368 = getelementptr i8, ptr addrspace(1) %.pn15139, i64 128, !dbg !57
  %unmaskedload130 = load <8 x half>, ptr addrspace(1) %368, align 16, !dbg !37

  tail call void @llvm.amdgcn.sched.barrier(i32 1039), !dbg !59 ; lds+global

  ;####################
  ; Load B 23 K0 pref=1
  ; B2 K0
  %369 = load <8 x half>, ptr addrspace(3) %152, align 16, !dbg !37
  %370 = shufflevector <8 x half> %369, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %371 = shufflevector <8 x half> %369, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B3 K0
  %372 = load <8 x half>, ptr addrspace(3) %154, align 16, !dbg !37
  %373 = shufflevector <8 x half> %372, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %374 = shufflevector <8 x half> %372, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=0,n=1,k=0
  %375 = insertelement <4 x float> poison, float %206, i64 0, !dbg !59
  %376 = insertelement <4 x float> %375, float %207, i64 1, !dbg !59
  %377 = insertelement <4 x float> %376, float %208, i64 2, !dbg !59
  %378 = insertelement <4 x float> %377, float %209, i64 3, !dbg !59
  %379 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %329, <4 x float> %378, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %380 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %330, <4 x float> %379, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %381 = insertelement <4 x float> poison, float %210, i64 0, !dbg !59
  %382 = insertelement <4 x float> %381, float %211, i64 1, !dbg !59
  %383 = insertelement <4 x float> %382, float %212, i64 2, !dbg !59
  %384 = insertelement <4 x float> %383, float %213, i64 3, !dbg !59
  %385 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %329, <4 x float> %384, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %386 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %330, <4 x float> %385, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %387 = insertelement <4 x float> poison, float %222, i64 0, !dbg !59
  %388 = insertelement <4 x float> %387, float %223, i64 1, !dbg !59
  %389 = insertelement <4 x float> %388, float %224, i64 2, !dbg !59
  %390 = insertelement <4 x float> %389, float %225, i64 3, !dbg !59
  %391 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %333, <4 x float> %390, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %392 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %334, <4 x float> %391, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %393 = insertelement <4 x float> poison, float %226, i64 0, !dbg !59
  %394 = insertelement <4 x float> %393, float %227, i64 1, !dbg !59
  %395 = insertelement <4 x float> %394, float %228, i64 2, !dbg !59
  %396 = insertelement <4 x float> %395, float %229, i64 3, !dbg !59
  %397 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %333, <4 x float> %396, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %398 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %334, <4 x float> %397, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 0
  tail call void @llvm.amdgcn.sched.group.barrier(i32  16, i32 1, i32 0), !dbg !47 ; global
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 1
  tail call void @llvm.amdgcn.sched.group.barrier(i32  16, i32 1, i32 0), !dbg !47 ; global
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 2
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 3
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 4, i32 0), !dbg !47 ; mfma 4-7

  tail call void @llvm.amdgcn.sched.barrier(i32 1030), !dbg !59 ; mfma+lds+global
  call void @llvm.amdgcn.s.setprio(i16 2), !dbg !36

  ; global_load[4]
  %399 = getelementptr i8, ptr addrspace(1) %.pn127140, i64 128, !dbg !58
  %unmaskedload131 = load <8 x half>, ptr addrspace(1) %399, align 16, !dbg !43
  ; global_load[5]
  %400 = getelementptr i8, ptr addrspace(1) %.pn111141, i64 128, !dbg !58
  %unmaskedload132 = load <8 x half>, ptr addrspace(1) %400, align 16, !dbg !43

  tail call void @llvm.amdgcn.sched.barrier(i32 1039), !dbg !59 ; lds+global

  ;####################
  ; Load B 45 K0 pref=2
  ; B4 K0
  %401 = load <8 x half>, ptr addrspace(3) %156, align 16, !dbg !37
  %402 = shufflevector <8 x half> %401, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %403 = shufflevector <8 x half> %401, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B5 K0
  %404 = load <8 x half>, ptr addrspace(3) %158, align 16, !dbg !37
  %405 = shufflevector <8 x half> %404, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %406 = shufflevector <8 x half> %404, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=1,n=0,k=0
  %407 = insertelement <4 x float> poison, float %230, i64 0, !dbg !59
  %408 = insertelement <4 x float> %407, float %231, i64 1, !dbg !59
  %409 = insertelement <4 x float> %408, float %232, i64 2, !dbg !59
  %410 = insertelement <4 x float> %409, float %233, i64 3, !dbg !59
  %411 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %370, <4 x float> %410, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %412 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %371, <4 x float> %411, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %413 = insertelement <4 x float> poison, float %234, i64 0, !dbg !59
  %414 = insertelement <4 x float> %413, float %235, i64 1, !dbg !59
  %415 = insertelement <4 x float> %414, float %236, i64 2, !dbg !59
  %416 = insertelement <4 x float> %415, float %237, i64 3, !dbg !59
  %417 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %370, <4 x float> %416, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %418 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %371, <4 x float> %417, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %419 = insertelement <4 x float> poison, float %246, i64 0, !dbg !59
  %420 = insertelement <4 x float> %419, float %247, i64 1, !dbg !59
  %421 = insertelement <4 x float> %420, float %248, i64 2, !dbg !59
  %422 = insertelement <4 x float> %421, float %249, i64 3, !dbg !59
  %423 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %373, <4 x float> %422, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %424 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %374, <4 x float> %423, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %425 = insertelement <4 x float> poison, float %250, i64 0, !dbg !59
  %426 = insertelement <4 x float> %425, float %251, i64 1, !dbg !59
  %427 = insertelement <4 x float> %426, float %252, i64 2, !dbg !59
  %428 = insertelement <4 x float> %427, float %253, i64 3, !dbg !59
  %429 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %373, <4 x float> %428, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %430 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %374, <4 x float> %429, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 0
  tail call void @llvm.amdgcn.sched.group.barrier(i32  16, i32 1, i32 0), !dbg !47 ; global
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 1
  tail call void @llvm.amdgcn.sched.group.barrier(i32  16, i32 1, i32 0), !dbg !47 ; global
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 2
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma 3
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 4, i32 0), !dbg !47 ; mfma 4-7

  tail call void @llvm.amdgcn.sched.barrier(i32 1030), !dbg !59 ; mfma+lds+global
  call void @llvm.amdgcn.s.setprio(i16 1), !dbg !36

  ; global_load[6]
  %431 = getelementptr i8, ptr addrspace(1) %.pn95142, i64 128, !dbg !58
  %unmaskedload133 = load <8 x half>, ptr addrspace(1) %431, align 16, !dbg !43
  ; global_load[7]
  %432 = getelementptr i8, ptr addrspace(1) %.pn79143, i64 128, !dbg !58
  %unmaskedload134 = load <8 x half>, ptr addrspace(1) %432, align 16, !dbg !43

  ;#############################################################################
  ; mfma tile m=1,n=1,k=0
  %433 = insertelement <4 x float> poison, float %238, i64 0, !dbg !59
  %434 = insertelement <4 x float> %433, float %239, i64 1, !dbg !59
  %435 = insertelement <4 x float> %434, float %240, i64 2, !dbg !59
  %436 = insertelement <4 x float> %435, float %241, i64 3, !dbg !59
  %437 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %370, <4 x float> %436, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %438 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %371, <4 x float> %437, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %439 = insertelement <4 x float> poison, float %242, i64 0, !dbg !59
  %440 = insertelement <4 x float> %439, float %243, i64 1, !dbg !59
  %441 = insertelement <4 x float> %440, float %244, i64 2, !dbg !59
  %442 = insertelement <4 x float> %441, float %245, i64 3, !dbg !59
  %443 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %370, <4 x float> %442, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %444 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %371, <4 x float> %443, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %445 = insertelement <4 x float> poison, float %254, i64 0, !dbg !59
  %446 = insertelement <4 x float> %445, float %255, i64 1, !dbg !59
  %447 = insertelement <4 x float> %446, float %256, i64 2, !dbg !59
  %448 = insertelement <4 x float> %447, float %257, i64 3, !dbg !59
  %449 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %373, <4 x float> %448, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %450 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %374, <4 x float> %449, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %451 = insertelement <4 x float> poison, float %258, i64 0, !dbg !59
  %452 = insertelement <4 x float> %451, float %259, i64 1, !dbg !59
  %453 = insertelement <4 x float> %452, float %260, i64 2, !dbg !59
  %454 = insertelement <4 x float> %453, float %261, i64 3, !dbg !59
  %455 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %373, <4 x float> %454, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %456 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %374, <4 x float> %455, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds
  call void @llvm.amdgcn.s.setprio(i16 0), !dbg !36

  ;####################
  ; Load B 67 K0 pref=2
  ; B6 K0
  %457 = load <8 x half>, ptr addrspace(3) %160, align 16, !dbg !37
  %458 = shufflevector <8 x half> %457, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %459 = shufflevector <8 x half> %457, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B7 K0
  %460 = load <8 x half>, ptr addrspace(3) %162, align 16, !dbg !37
  %461 = shufflevector <8 x half> %460, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %462 = shufflevector <8 x half> %460, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=2,n=0,k=0
  %463 = insertelement <4 x float> poison, float %262, i64 0, !dbg !59
  %464 = insertelement <4 x float> %463, float %263, i64 1, !dbg !59
  %465 = insertelement <4 x float> %464, float %264, i64 2, !dbg !59
  %466 = insertelement <4 x float> %465, float %265, i64 3, !dbg !59
  %467 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %402, <4 x float> %466, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %468 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %403, <4 x float> %467, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %469 = insertelement <4 x float> poison, float %266, i64 0, !dbg !59
  %470 = insertelement <4 x float> %469, float %267, i64 1, !dbg !59
  %471 = insertelement <4 x float> %470, float %268, i64 2, !dbg !59
  %472 = insertelement <4 x float> %471, float %269, i64 3, !dbg !59
  %473 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %402, <4 x float> %472, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %474 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %403, <4 x float> %473, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %475 = insertelement <4 x float> poison, float %278, i64 0, !dbg !59
  %476 = insertelement <4 x float> %475, float %279, i64 1, !dbg !59
  %477 = insertelement <4 x float> %476, float %280, i64 2, !dbg !59
  %478 = insertelement <4 x float> %477, float %281, i64 3, !dbg !59
  %479 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %405, <4 x float> %478, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %480 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %406, <4 x float> %479, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %481 = insertelement <4 x float> poison, float %282, i64 0, !dbg !59
  %482 = insertelement <4 x float> %481, float %283, i64 1, !dbg !59
  %483 = insertelement <4 x float> %482, float %284, i64 2, !dbg !59
  %484 = insertelement <4 x float> %483, float %285, i64 3, !dbg !59
  %485 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %405, <4 x float> %484, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %486 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %406, <4 x float> %485, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;#############################################################################
  ; mfma tile m=2,n=1,k=0
  %487 = insertelement <4 x float> poison, float %270, i64 0, !dbg !59
  %488 = insertelement <4 x float> %487, float %271, i64 1, !dbg !59
  %489 = insertelement <4 x float> %488, float %272, i64 2, !dbg !59
  %490 = insertelement <4 x float> %489, float %273, i64 3, !dbg !59
  %491 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %402, <4 x float> %490, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %492 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %403, <4 x float> %491, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %493 = insertelement <4 x float> poison, float %274, i64 0, !dbg !59
  %494 = insertelement <4 x float> %493, float %275, i64 1, !dbg !59
  %495 = insertelement <4 x float> %494, float %276, i64 2, !dbg !59
  %496 = insertelement <4 x float> %495, float %277, i64 3, !dbg !59
  %497 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %402, <4 x float> %496, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %498 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %403, <4 x float> %497, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %499 = insertelement <4 x float> poison, float %286, i64 0, !dbg !59
  %500 = insertelement <4 x float> %499, float %287, i64 1, !dbg !59
  %501 = insertelement <4 x float> %500, float %288, i64 2, !dbg !59
  %502 = insertelement <4 x float> %501, float %289, i64 3, !dbg !59
  %503 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %405, <4 x float> %502, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %504 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %406, <4 x float> %503, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %505 = insertelement <4 x float> poison, float %290, i64 0, !dbg !59
  %506 = insertelement <4 x float> %505, float %291, i64 1, !dbg !59
  %507 = insertelement <4 x float> %506, float %292, i64 2, !dbg !59
  %508 = insertelement <4 x float> %507, float %293, i64 3, !dbg !59
  %509 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %405, <4 x float> %508, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %510 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %406, <4 x float> %509, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;####################
  ; Load A 01 K1 pref=2
  ; A0 K1
  %511 = load <8 x half>, ptr addrspace(3) %177, align 16, !dbg !43
  %512 = shufflevector <8 x half> %511, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %513 = shufflevector <8 x half> %511, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B0 K1
  %514 = load <8 x half>, ptr addrspace(3) %149, align 16, !dbg !37
  %515 = shufflevector <8 x half> %514, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %516 = shufflevector <8 x half> %514, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; A1 K1
  %517 = load <8 x half>, ptr addrspace(3) %179, align 16, !dbg !43
  %518 = shufflevector <8 x half> %517, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %519 = shufflevector <8 x half> %517, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;####################
  ; Load B 01 K1 pref=2
  ; B1 K1
  %520 = load <8 x half>, ptr addrspace(3) %151, align 16, !dbg !37
  %521 = shufflevector <8 x half> %520, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %522 = shufflevector <8 x half> %520, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=3,n=0,k=0
  %523 = insertelement <4 x float> poison, float %294, i64 0, !dbg !59
  %524 = insertelement <4 x float> %523, float %295, i64 1, !dbg !59
  %525 = insertelement <4 x float> %524, float %296, i64 2, !dbg !59
  %526 = insertelement <4 x float> %525, float %297, i64 3, !dbg !59
  %527 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %458, <4 x float> %526, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %528 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %459, <4 x float> %527, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %529 = insertelement <4 x float> poison, float %298, i64 0, !dbg !59
  %530 = insertelement <4 x float> %529, float %299, i64 1, !dbg !59
  %531 = insertelement <4 x float> %530, float %300, i64 2, !dbg !59
  %532 = insertelement <4 x float> %531, float %301, i64 3, !dbg !59
  %533 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %458, <4 x float> %532, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %534 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %459, <4 x float> %533, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %535 = insertelement <4 x float> poison, float %310, i64 0, !dbg !59
  %536 = insertelement <4 x float> %535, float %311, i64 1, !dbg !59
  %537 = insertelement <4 x float> %536, float %312, i64 2, !dbg !59
  %538 = insertelement <4 x float> %537, float %313, i64 3, !dbg !59
  %539 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %327, <4 x half> %461, <4 x float> %538, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %540 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %328, <4 x half> %462, <4 x float> %539, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %541 = insertelement <4 x float> poison, float %314, i64 0, !dbg !59
  %542 = insertelement <4 x float> %541, float %315, i64 1, !dbg !59
  %543 = insertelement <4 x float> %542, float %316, i64 2, !dbg !59
  %544 = insertelement <4 x float> %543, float %317, i64 3, !dbg !59
  %545 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %331, <4 x half> %461, <4 x float> %544, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %546 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %332, <4 x half> %462, <4 x float> %545, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;####################
  ; Load A 23 K1 pref=2
  ; A2 K1
  %547 = load <8 x half>, ptr addrspace(3) %181, align 16, !dbg !43
  %548 = shufflevector <8 x half> %547, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %549 = shufflevector <8 x half> %547, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; A3 K1
  %550 = load <8 x half>, ptr addrspace(3) %183, align 16, !dbg !43
  %551 = shufflevector <8 x half> %550, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %552 = shufflevector <8 x half> %550, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=3,n=1,k=0
  %553 = insertelement <4 x float> poison, float %302, i64 0, !dbg !59
  %554 = insertelement <4 x float> %553, float %303, i64 1, !dbg !59
  %555 = insertelement <4 x float> %554, float %304, i64 2, !dbg !59
  %556 = insertelement <4 x float> %555, float %305, i64 3, !dbg !59
  %557 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %458, <4 x float> %556, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %558 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %459, <4 x float> %557, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %559 = insertelement <4 x float> poison, float %306, i64 0, !dbg !59
  %560 = insertelement <4 x float> %559, float %307, i64 1, !dbg !59
  %561 = insertelement <4 x float> %560, float %308, i64 2, !dbg !59
  %562 = insertelement <4 x float> %561, float %309, i64 3, !dbg !59
  %563 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %458, <4 x float> %562, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %564 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %459, <4 x float> %563, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %565 = insertelement <4 x float> poison, float %318, i64 0, !dbg !59
  %566 = insertelement <4 x float> %565, float %319, i64 1, !dbg !59
  %567 = insertelement <4 x float> %566, float %320, i64 2, !dbg !59
  %568 = insertelement <4 x float> %567, float %321, i64 3, !dbg !59
  %569 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %338, <4 x half> %461, <4 x float> %568, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %570 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %339, <4 x half> %462, <4 x float> %569, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %571 = insertelement <4 x float> poison, float %322, i64 0, !dbg !59
  %572 = insertelement <4 x float> %571, float %323, i64 1, !dbg !59
  %573 = insertelement <4 x float> %572, float %324, i64 2, !dbg !59
  %574 = insertelement <4 x float> %573, float %325, i64 3, !dbg !59
  %575 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %341, <4 x half> %461, <4 x float> %574, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %576 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %342, <4 x half> %462, <4 x float> %575, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59

  ;#############################################################################
  ; half way
  ;#############################################################################

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;####################
  ; Load B 23 K1 pref=2
  ; B2 K1
  %577 = load <8 x half>, ptr addrspace(3) %153, align 16, !dbg !37
  %578 = shufflevector <8 x half> %577, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %579 = shufflevector <8 x half> %577, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B3 K1
  %580 = load <8 x half>, ptr addrspace(3) %155, align 16, !dbg !37
  %581 = shufflevector <8 x half> %580, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %582 = shufflevector <8 x half> %580, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=0,n=0,k=1
  %583 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %515, <4 x float> %348, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %584 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %516, <4 x float> %583, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %585 = extractelement <4 x float> %584, i64 0, !dbg !59
  %586 = extractelement <4 x float> %584, i64 1, !dbg !59
  %587 = extractelement <4 x float> %584, i64 2, !dbg !59
  %588 = extractelement <4 x float> %584, i64 3, !dbg !59
  %589 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %515, <4 x float> %354, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %590 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %516, <4 x float> %589, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %591 = extractelement <4 x float> %590, i64 0, !dbg !59
  %592 = extractelement <4 x float> %590, i64 1, !dbg !59
  %593 = extractelement <4 x float> %590, i64 2, !dbg !59
  %594 = extractelement <4 x float> %590, i64 3, !dbg !59
  %595 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %521, <4 x float> %360, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %596 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %522, <4 x float> %595, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %597 = extractelement <4 x float> %596, i64 0, !dbg !59
  %598 = extractelement <4 x float> %596, i64 1, !dbg !59
  %599 = extractelement <4 x float> %596, i64 2, !dbg !59
  %600 = extractelement <4 x float> %596, i64 3, !dbg !59
  %601 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %521, <4 x float> %366, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %602 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %522, <4 x float> %601, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %603 = extractelement <4 x float> %602, i64 0, !dbg !59
  %604 = extractelement <4 x float> %602, i64 1, !dbg !59
  %605 = extractelement <4 x float> %602, i64 2, !dbg !59
  %606 = extractelement <4 x float> %602, i64 3, !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;#############################################################################
  ; mfma tile m=0,n=1,k=1
  %607 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %515, <4 x float> %380, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %608 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %516, <4 x float> %607, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %609 = extractelement <4 x float> %608, i64 0, !dbg !59
  %610 = extractelement <4 x float> %608, i64 1, !dbg !59
  %611 = extractelement <4 x float> %608, i64 2, !dbg !59
  %612 = extractelement <4 x float> %608, i64 3, !dbg !59
  %613 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %515, <4 x float> %386, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %614 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %516, <4 x float> %613, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %615 = extractelement <4 x float> %614, i64 0, !dbg !59
  %616 = extractelement <4 x float> %614, i64 1, !dbg !59
  %617 = extractelement <4 x float> %614, i64 2, !dbg !59
  %618 = extractelement <4 x float> %614, i64 3, !dbg !59
  %619 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %521, <4 x float> %392, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %620 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %522, <4 x float> %619, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %621 = extractelement <4 x float> %620, i64 0, !dbg !59
  %622 = extractelement <4 x float> %620, i64 1, !dbg !59
  %623 = extractelement <4 x float> %620, i64 2, !dbg !59
  %624 = extractelement <4 x float> %620, i64 3, !dbg !59
  %625 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %521, <4 x float> %398, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %626 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %522, <4 x float> %625, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %627 = extractelement <4 x float> %626, i64 0, !dbg !59
  %628 = extractelement <4 x float> %626, i64 1, !dbg !59
  %629 = extractelement <4 x float> %626, i64 2, !dbg !59
  %630 = extractelement <4 x float> %626, i64 3, !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;####################
  ; Load B 45 K1 pref=2
  ; B4 K1
  %631 = load <8 x half>, ptr addrspace(3) %157, align 16, !dbg !37
  %632 = shufflevector <8 x half> %631, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %633 = shufflevector <8 x half> %631, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B5 K1
  %634 = load <8 x half>, ptr addrspace(3) %159, align 16, !dbg !37
  %635 = shufflevector <8 x half> %634, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %636 = shufflevector <8 x half> %634, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=1,n=0,k=1
  %637 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %578, <4 x float> %412, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %638 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %579, <4 x float> %637, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %639 = extractelement <4 x float> %638, i64 0, !dbg !59
  %640 = extractelement <4 x float> %638, i64 1, !dbg !59
  %641 = extractelement <4 x float> %638, i64 2, !dbg !59
  %642 = extractelement <4 x float> %638, i64 3, !dbg !59
  %643 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %578, <4 x float> %418, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %644 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %579, <4 x float> %643, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %645 = extractelement <4 x float> %644, i64 0, !dbg !59
  %646 = extractelement <4 x float> %644, i64 1, !dbg !59
  %647 = extractelement <4 x float> %644, i64 2, !dbg !59
  %648 = extractelement <4 x float> %644, i64 3, !dbg !59
  %649 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %581, <4 x float> %424, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %650 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %582, <4 x float> %649, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %651 = extractelement <4 x float> %650, i64 0, !dbg !59
  %652 = extractelement <4 x float> %650, i64 1, !dbg !59
  %653 = extractelement <4 x float> %650, i64 2, !dbg !59
  %654 = extractelement <4 x float> %650, i64 3, !dbg !59
  %655 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %581, <4 x float> %430, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %656 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %582, <4 x float> %655, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %657 = extractelement <4 x float> %656, i64 0, !dbg !59
  %658 = extractelement <4 x float> %656, i64 1, !dbg !59
  %659 = extractelement <4 x float> %656, i64 2, !dbg !59
  %660 = extractelement <4 x float> %656, i64 3, !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ;####################
  ; Load B 67 K1 pref=2
  ; B6 K1
  %661 = load <8 x half>, ptr addrspace(3) %161, align 16, !dbg !37
  %662 = shufflevector <8 x half> %661, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %663 = shufflevector <8 x half> %661, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B7 K1
  %664 = load <8 x half>, ptr addrspace(3) %163, align 16, !dbg !37
  %665 = shufflevector <8 x half> %664, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %666 = shufflevector <8 x half> %664, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=1,n=1,k=1
  %667 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %578, <4 x float> %438, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %668 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %579, <4 x float> %667, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %669 = extractelement <4 x float> %668, i64 0, !dbg !59
  %670 = extractelement <4 x float> %668, i64 1, !dbg !59
  %671 = extractelement <4 x float> %668, i64 2, !dbg !59
  %672 = extractelement <4 x float> %668, i64 3, !dbg !59
  %673 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %578, <4 x float> %444, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %674 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %579, <4 x float> %673, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %675 = extractelement <4 x float> %674, i64 0, !dbg !59
  %676 = extractelement <4 x float> %674, i64 1, !dbg !59
  %677 = extractelement <4 x float> %674, i64 2, !dbg !59
  %678 = extractelement <4 x float> %674, i64 3, !dbg !59
  %679 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %581, <4 x float> %450, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %680 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %582, <4 x float> %679, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %681 = extractelement <4 x float> %680, i64 0, !dbg !59
  %682 = extractelement <4 x float> %680, i64 1, !dbg !59
  %683 = extractelement <4 x float> %680, i64 2, !dbg !59
  %684 = extractelement <4 x float> %680, i64 3, !dbg !59
  %685 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %581, <4 x float> %456, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %686 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %582, <4 x float> %685, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %687 = extractelement <4 x float> %686, i64 0, !dbg !59
  %688 = extractelement <4 x float> %686, i64 1, !dbg !59
  %689 = extractelement <4 x float> %686, i64 2, !dbg !59
  %690 = extractelement <4 x float> %686, i64 3, !dbg !59

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  call void @llvm.amdgcn.s.setprio(i16 3), !dbg !36

  ;#############################################################################
  ;#############################################################################
  fence syncscope("workgroup") release, !dbg !37
  tail call void @llvm.amdgcn.s.barrier(), !dbg !37
  fence syncscope("workgroup") acquire, !dbg !37
  ;#############################################################################
  ;#############################################################################

  store <8 x half> %unmaskedload, ptr addrspace(3) %105, align 16, !dbg !37
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload128, ptr addrspace(3) %111, align 16, !dbg !37
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload129, ptr addrspace(3) %113, align 16, !dbg !37
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload130, ptr addrspace(3) %115, align 16, !dbg !37
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload131, ptr addrspace(3) %116, align 16, !dbg !43
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload132, ptr addrspace(3) %117, align 16, !dbg !43
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload133, ptr addrspace(3) %118, align 16, !dbg !43
  tail call void @llvm.amdgcn.sched.barrier(i32 1535), !dbg !59 ; ds_write
  store <8 x half> %unmaskedload134, ptr addrspace(3) %119, align 16, !dbg !43


  ;#############################################################################
  ; mfma tile m=2,n=0,k=1
  %691 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %632, <4 x float> %468, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %692 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %633, <4 x float> %691, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %693 = extractelement <4 x float> %692, i64 0, !dbg !59
  %694 = extractelement <4 x float> %692, i64 1, !dbg !59
  %695 = extractelement <4 x float> %692, i64 2, !dbg !59
  %696 = extractelement <4 x float> %692, i64 3, !dbg !59
  %697 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %632, <4 x float> %474, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %698 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %633, <4 x float> %697, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %699 = extractelement <4 x float> %698, i64 0, !dbg !59
  %700 = extractelement <4 x float> %698, i64 1, !dbg !59
  %701 = extractelement <4 x float> %698, i64 2, !dbg !59
  %702 = extractelement <4 x float> %698, i64 3, !dbg !59
  %703 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %635, <4 x float> %480, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %704 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %636, <4 x float> %703, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %705 = extractelement <4 x float> %704, i64 0, !dbg !59
  %706 = extractelement <4 x float> %704, i64 1, !dbg !59
  %707 = extractelement <4 x float> %704, i64 2, !dbg !59
  %708 = extractelement <4 x float> %704, i64 3, !dbg !59
  %709 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %635, <4 x float> %486, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %710 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %636, <4 x float> %709, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %711 = extractelement <4 x float> %710, i64 0, !dbg !59
  %712 = extractelement <4 x float> %710, i64 1, !dbg !59
  %713 = extractelement <4 x float> %710, i64 2, !dbg !59
  %714 = extractelement <4 x float> %710, i64 3, !dbg !59

  call void @llvm.amdgcn.s.setprio(i16 2), !dbg !36


  ;#############################################################################
  ; mfma tile m=2,n=1,k=1
  %715 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %632, <4 x float> %492, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %716 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %633, <4 x float> %715, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %717 = extractelement <4 x float> %716, i64 0, !dbg !59
  %718 = extractelement <4 x float> %716, i64 1, !dbg !59
  %719 = extractelement <4 x float> %716, i64 2, !dbg !59
  %720 = extractelement <4 x float> %716, i64 3, !dbg !59
  %721 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %632, <4 x float> %498, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %722 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %633, <4 x float> %721, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %723 = extractelement <4 x float> %722, i64 0, !dbg !59
  %724 = extractelement <4 x float> %722, i64 1, !dbg !59
  %725 = extractelement <4 x float> %722, i64 2, !dbg !59
  %726 = extractelement <4 x float> %722, i64 3, !dbg !59
  %727 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %635, <4 x float> %504, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %728 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %636, <4 x float> %727, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %729 = extractelement <4 x float> %728, i64 0, !dbg !59
  %730 = extractelement <4 x float> %728, i64 1, !dbg !59
  %731 = extractelement <4 x float> %728, i64 2, !dbg !59
  %732 = extractelement <4 x float> %728, i64 3, !dbg !59
  %733 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %635, <4 x float> %510, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %734 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %636, <4 x float> %733, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %735 = extractelement <4 x float> %734, i64 0, !dbg !59
  %736 = extractelement <4 x float> %734, i64 1, !dbg !59
  %737 = extractelement <4 x float> %734, i64 2, !dbg !59
  %738 = extractelement <4 x float> %734, i64 3, !dbg !59

  call void @llvm.amdgcn.s.setprio(i16 1), !dbg !36

  ;#############################################################################
  ; mfma tile m=2,n=2,k=1
  %739 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %662, <4 x float> %528, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %740 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %663, <4 x float> %739, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %741 = extractelement <4 x float> %740, i64 0, !dbg !59
  %742 = extractelement <4 x float> %740, i64 1, !dbg !59
  %743 = extractelement <4 x float> %740, i64 2, !dbg !59
  %744 = extractelement <4 x float> %740, i64 3, !dbg !59
  %745 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %662, <4 x float> %534, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %746 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %663, <4 x float> %745, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %747 = extractelement <4 x float> %746, i64 0, !dbg !59
  %748 = extractelement <4 x float> %746, i64 1, !dbg !59
  %749 = extractelement <4 x float> %746, i64 2, !dbg !59
  %750 = extractelement <4 x float> %746, i64 3, !dbg !59
  %751 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %512, <4 x half> %665, <4 x float> %540, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %752 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %513, <4 x half> %666, <4 x float> %751, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %753 = extractelement <4 x float> %752, i64 0, !dbg !59
  %754 = extractelement <4 x float> %752, i64 1, !dbg !59
  %755 = extractelement <4 x float> %752, i64 2, !dbg !59
  %756 = extractelement <4 x float> %752, i64 3, !dbg !59
  %757 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %518, <4 x half> %665, <4 x float> %546, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %758 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %519, <4 x half> %666, <4 x float> %757, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %759 = extractelement <4 x float> %758, i64 0, !dbg !59
  %760 = extractelement <4 x float> %758, i64 1, !dbg !59
  %761 = extractelement <4 x float> %758, i64 2, !dbg !59
  %762 = extractelement <4 x float> %758, i64 3, !dbg !59

  ; 8 ds_store * 3 mfma/each = 24 mfmas
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 512, i32 1, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma

  call void @llvm.amdgcn.s.setprio(i16 3), !dbg !36

  fence syncscope("workgroup") release, !dbg !37
  tail call void @llvm.amdgcn.s.barrier(), !dbg !37
  fence syncscope("workgroup") acquire, !dbg !37

  tail call void @llvm.amdgcn.sched.barrier(i32 1142), !dbg !59 ; mfma+lds

  ; Local Prefetch for next iteration
  ; A0 K0
  %763 = load <8 x half>, ptr addrspace(3) %176, align 16, !dbg !43
  %764 = shufflevector <8 x half> %763, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %765 = shufflevector <8 x half> %763, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B0 K0
  %766 = load <8 x half>, ptr addrspace(3) %148, align 16, !dbg !37
  %767 = shufflevector <8 x half> %766, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %768 = shufflevector <8 x half> %766, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; A1 K0
  %769 = load <8 x half>, ptr addrspace(3) %178, align 16, !dbg !43
  %770 = shufflevector <8 x half> %769, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %771 = shufflevector <8 x half> %769, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read
  ; B1 K0
  %772 = load <8 x half>, ptr addrspace(3) %150, align 16, !dbg !37
  %773 = shufflevector <8 x half> %772, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %774 = shufflevector <8 x half> %772, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 1791), !dbg !59 ; ds_read

  ;#############################################################################
  ; mfma tile m=3,n=1,k=1
  %775 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %662, <4 x float> %558, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %776 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %663, <4 x float> %775, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %777 = extractelement <4 x float> %776, i64 0, !dbg !59
  %778 = extractelement <4 x float> %776, i64 1, !dbg !59
  %779 = extractelement <4 x float> %776, i64 2, !dbg !59
  %780 = extractelement <4 x float> %776, i64 3, !dbg !59
  %781 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %662, <4 x float> %564, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %782 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %663, <4 x float> %781, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %783 = extractelement <4 x float> %782, i64 0, !dbg !59
  %784 = extractelement <4 x float> %782, i64 1, !dbg !59
  %785 = extractelement <4 x float> %782, i64 2, !dbg !59
  %786 = extractelement <4 x float> %782, i64 3, !dbg !59
  %787 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %548, <4 x half> %665, <4 x float> %570, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %788 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %549, <4 x half> %666, <4 x float> %787, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %789 = extractelement <4 x float> %788, i64 0, !dbg !59
  %790 = extractelement <4 x float> %788, i64 1, !dbg !59
  %791 = extractelement <4 x float> %788, i64 2, !dbg !59
  %792 = extractelement <4 x float> %788, i64 3, !dbg !59
  %793 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %551, <4 x half> %665, <4 x float> %576, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %794 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %552, <4 x half> %666, <4 x float> %793, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %795 = extractelement <4 x float> %794, i64 0, !dbg !59
  %796 = extractelement <4 x float> %794, i64 1, !dbg !59
  %797 = extractelement <4 x float> %794, i64 2, !dbg !59
  %798 = extractelement <4 x float> %794, i64 3, !dbg !59

  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 3, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 2, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 1, i32 0), !dbg !47 ; mfma
  tail call void @llvm.amdgcn.sched.group.barrier(i32 128, i32 2, i32 0), !dbg !47 ; lds
  tail call void @llvm.amdgcn.sched.group.barrier(i32   8, i32 4, i32 0), !dbg !47 ; mfma


  %799 = add nuw nsw i32 %326, 1, !dbg !36
  %exitcond.not = icmp eq i32 %326, %184, !dbg !36
  br i1 %exitcond.not, label %._crit_edge, label %197, !dbg !36

  ;#############################################################################
  ; End Loop
  ;#############################################################################

._crit_edge:                                      ; preds = %197, %12
  %800 = phi float [ 0.000000e+00, %12 ], [ %585, %197 ]
  %801 = phi float [ 0.000000e+00, %12 ], [ %586, %197 ]
  %802 = phi float [ 0.000000e+00, %12 ], [ %587, %197 ]
  %803 = phi float [ 0.000000e+00, %12 ], [ %588, %197 ]
  %804 = phi float [ 0.000000e+00, %12 ], [ %591, %197 ]
  %805 = phi float [ 0.000000e+00, %12 ], [ %592, %197 ]
  %806 = phi float [ 0.000000e+00, %12 ], [ %593, %197 ]
  %807 = phi float [ 0.000000e+00, %12 ], [ %594, %197 ]
  %808 = phi float [ 0.000000e+00, %12 ], [ %609, %197 ]
  %809 = phi float [ 0.000000e+00, %12 ], [ %610, %197 ]
  %810 = phi float [ 0.000000e+00, %12 ], [ %611, %197 ]
  %811 = phi float [ 0.000000e+00, %12 ], [ %612, %197 ]
  %812 = phi float [ 0.000000e+00, %12 ], [ %615, %197 ]
  %813 = phi float [ 0.000000e+00, %12 ], [ %616, %197 ]
  %814 = phi float [ 0.000000e+00, %12 ], [ %617, %197 ]
  %815 = phi float [ 0.000000e+00, %12 ], [ %618, %197 ]
  %816 = phi float [ 0.000000e+00, %12 ], [ %597, %197 ]
  %817 = phi float [ 0.000000e+00, %12 ], [ %598, %197 ]
  %818 = phi float [ 0.000000e+00, %12 ], [ %599, %197 ]
  %819 = phi float [ 0.000000e+00, %12 ], [ %600, %197 ]
  %820 = phi float [ 0.000000e+00, %12 ], [ %603, %197 ]
  %821 = phi float [ 0.000000e+00, %12 ], [ %604, %197 ]
  %822 = phi float [ 0.000000e+00, %12 ], [ %605, %197 ]
  %823 = phi float [ 0.000000e+00, %12 ], [ %606, %197 ]
  %824 = phi float [ 0.000000e+00, %12 ], [ %621, %197 ]
  %825 = phi float [ 0.000000e+00, %12 ], [ %622, %197 ]
  %826 = phi float [ 0.000000e+00, %12 ], [ %623, %197 ]
  %827 = phi float [ 0.000000e+00, %12 ], [ %624, %197 ]
  %828 = phi float [ 0.000000e+00, %12 ], [ %627, %197 ]
  %829 = phi float [ 0.000000e+00, %12 ], [ %628, %197 ]
  %830 = phi float [ 0.000000e+00, %12 ], [ %629, %197 ]
  %831 = phi float [ 0.000000e+00, %12 ], [ %630, %197 ]
  %832 = phi float [ 0.000000e+00, %12 ], [ %639, %197 ]
  %833 = phi float [ 0.000000e+00, %12 ], [ %640, %197 ]
  %834 = phi float [ 0.000000e+00, %12 ], [ %641, %197 ]
  %835 = phi float [ 0.000000e+00, %12 ], [ %642, %197 ]
  %836 = phi float [ 0.000000e+00, %12 ], [ %645, %197 ]
  %837 = phi float [ 0.000000e+00, %12 ], [ %646, %197 ]
  %838 = phi float [ 0.000000e+00, %12 ], [ %647, %197 ]
  %839 = phi float [ 0.000000e+00, %12 ], [ %648, %197 ]
  %840 = phi float [ 0.000000e+00, %12 ], [ %669, %197 ]
  %841 = phi float [ 0.000000e+00, %12 ], [ %670, %197 ]
  %842 = phi float [ 0.000000e+00, %12 ], [ %671, %197 ]
  %843 = phi float [ 0.000000e+00, %12 ], [ %672, %197 ]
  %844 = phi float [ 0.000000e+00, %12 ], [ %675, %197 ]
  %845 = phi float [ 0.000000e+00, %12 ], [ %676, %197 ]
  %846 = phi float [ 0.000000e+00, %12 ], [ %677, %197 ]
  %847 = phi float [ 0.000000e+00, %12 ], [ %678, %197 ]
  %848 = phi float [ 0.000000e+00, %12 ], [ %651, %197 ]
  %849 = phi float [ 0.000000e+00, %12 ], [ %652, %197 ]
  %850 = phi float [ 0.000000e+00, %12 ], [ %653, %197 ]
  %851 = phi float [ 0.000000e+00, %12 ], [ %654, %197 ]
  %852 = phi float [ 0.000000e+00, %12 ], [ %657, %197 ]
  %853 = phi float [ 0.000000e+00, %12 ], [ %658, %197 ]
  %854 = phi float [ 0.000000e+00, %12 ], [ %659, %197 ]
  %855 = phi float [ 0.000000e+00, %12 ], [ %660, %197 ]
  %856 = phi float [ 0.000000e+00, %12 ], [ %681, %197 ]
  %857 = phi float [ 0.000000e+00, %12 ], [ %682, %197 ]
  %858 = phi float [ 0.000000e+00, %12 ], [ %683, %197 ]
  %859 = phi float [ 0.000000e+00, %12 ], [ %684, %197 ]
  %860 = phi float [ 0.000000e+00, %12 ], [ %687, %197 ]
  %861 = phi float [ 0.000000e+00, %12 ], [ %688, %197 ]
  %862 = phi float [ 0.000000e+00, %12 ], [ %689, %197 ]
  %863 = phi float [ 0.000000e+00, %12 ], [ %690, %197 ]
  %864 = phi float [ 0.000000e+00, %12 ], [ %693, %197 ]
  %865 = phi float [ 0.000000e+00, %12 ], [ %694, %197 ]
  %866 = phi float [ 0.000000e+00, %12 ], [ %695, %197 ]
  %867 = phi float [ 0.000000e+00, %12 ], [ %696, %197 ]
  %868 = phi float [ 0.000000e+00, %12 ], [ %699, %197 ]
  %869 = phi float [ 0.000000e+00, %12 ], [ %700, %197 ]
  %870 = phi float [ 0.000000e+00, %12 ], [ %701, %197 ]
  %871 = phi float [ 0.000000e+00, %12 ], [ %702, %197 ]
  %872 = phi float [ 0.000000e+00, %12 ], [ %717, %197 ]
  %873 = phi float [ 0.000000e+00, %12 ], [ %718, %197 ]
  %874 = phi float [ 0.000000e+00, %12 ], [ %719, %197 ]
  %875 = phi float [ 0.000000e+00, %12 ], [ %720, %197 ]
  %876 = phi float [ 0.000000e+00, %12 ], [ %723, %197 ]
  %877 = phi float [ 0.000000e+00, %12 ], [ %724, %197 ]
  %878 = phi float [ 0.000000e+00, %12 ], [ %725, %197 ]
  %879 = phi float [ 0.000000e+00, %12 ], [ %726, %197 ]
  %880 = phi float [ 0.000000e+00, %12 ], [ %705, %197 ]
  %881 = phi float [ 0.000000e+00, %12 ], [ %706, %197 ]
  %882 = phi float [ 0.000000e+00, %12 ], [ %707, %197 ]
  %883 = phi float [ 0.000000e+00, %12 ], [ %708, %197 ]
  %884 = phi float [ 0.000000e+00, %12 ], [ %711, %197 ]
  %885 = phi float [ 0.000000e+00, %12 ], [ %712, %197 ]
  %886 = phi float [ 0.000000e+00, %12 ], [ %713, %197 ]
  %887 = phi float [ 0.000000e+00, %12 ], [ %714, %197 ]
  %888 = phi float [ 0.000000e+00, %12 ], [ %729, %197 ]
  %889 = phi float [ 0.000000e+00, %12 ], [ %730, %197 ]
  %890 = phi float [ 0.000000e+00, %12 ], [ %731, %197 ]
  %891 = phi float [ 0.000000e+00, %12 ], [ %732, %197 ]
  %892 = phi float [ 0.000000e+00, %12 ], [ %735, %197 ]
  %893 = phi float [ 0.000000e+00, %12 ], [ %736, %197 ]
  %894 = phi float [ 0.000000e+00, %12 ], [ %737, %197 ]
  %895 = phi float [ 0.000000e+00, %12 ], [ %738, %197 ]
  %896 = phi float [ 0.000000e+00, %12 ], [ %741, %197 ]
  %897 = phi float [ 0.000000e+00, %12 ], [ %742, %197 ]
  %898 = phi float [ 0.000000e+00, %12 ], [ %743, %197 ]
  %899 = phi float [ 0.000000e+00, %12 ], [ %744, %197 ]
  %900 = phi float [ 0.000000e+00, %12 ], [ %747, %197 ]
  %901 = phi float [ 0.000000e+00, %12 ], [ %748, %197 ]
  %902 = phi float [ 0.000000e+00, %12 ], [ %749, %197 ]
  %903 = phi float [ 0.000000e+00, %12 ], [ %750, %197 ]
  %904 = phi float [ 0.000000e+00, %12 ], [ %777, %197 ]
  %905 = phi float [ 0.000000e+00, %12 ], [ %778, %197 ]
  %906 = phi float [ 0.000000e+00, %12 ], [ %779, %197 ]
  %907 = phi float [ 0.000000e+00, %12 ], [ %780, %197 ]
  %908 = phi float [ 0.000000e+00, %12 ], [ %783, %197 ]
  %909 = phi float [ 0.000000e+00, %12 ], [ %784, %197 ]
  %910 = phi float [ 0.000000e+00, %12 ], [ %785, %197 ]
  %911 = phi float [ 0.000000e+00, %12 ], [ %786, %197 ]
  %912 = phi float [ 0.000000e+00, %12 ], [ %753, %197 ]
  %913 = phi float [ 0.000000e+00, %12 ], [ %754, %197 ]
  %914 = phi float [ 0.000000e+00, %12 ], [ %755, %197 ]
  %915 = phi float [ 0.000000e+00, %12 ], [ %756, %197 ]
  %916 = phi float [ 0.000000e+00, %12 ], [ %759, %197 ]
  %917 = phi float [ 0.000000e+00, %12 ], [ %760, %197 ]
  %918 = phi float [ 0.000000e+00, %12 ], [ %761, %197 ]
  %919 = phi float [ 0.000000e+00, %12 ], [ %762, %197 ]
  %920 = phi float [ 0.000000e+00, %12 ], [ %789, %197 ]
  %921 = phi float [ 0.000000e+00, %12 ], [ %790, %197 ]
  %922 = phi float [ 0.000000e+00, %12 ], [ %791, %197 ]
  %923 = phi float [ 0.000000e+00, %12 ], [ %792, %197 ]
  %924 = phi float [ 0.000000e+00, %12 ], [ %795, %197 ]
  %925 = phi float [ 0.000000e+00, %12 ], [ %796, %197 ]
  %926 = phi float [ 0.000000e+00, %12 ], [ %797, %197 ]
  %927 = phi float [ 0.000000e+00, %12 ], [ %798, %197 ]
  fence syncscope("workgroup") release, !dbg !37
  tail call void @llvm.amdgcn.s.barrier(), !dbg !37
  fence syncscope("workgroup") acquire, !dbg !37
  br i1 %66, label %928, label %._crit_edge._crit_edge, !dbg !59

._crit_edge._crit_edge:                           ; preds = %._crit_edge
  %.pre = and i32 %32, 15, !dbg !28
  br label %1447, !dbg !59

  ; Epilogue will be re-loading the prefetched values from LDS to reg.
  ; This should be fine for correctness.

928:                                              ; preds = %._crit_edge
  %929 = lshr i32 %32, 1, !dbg !37
  %930 = and i32 %929, 24, !dbg !37
  %931 = or disjoint i32 %930, 32, !dbg !37
  %932 = xor i32 %931, %59, !dbg !43
  %933 = and i32 %32, 15, !dbg !37
  %934 = shl nuw nsw i32 %33, 4, !dbg !43
  %935 = and i32 %934, 48, !dbg !43
  %936 = or disjoint i32 %935, %933, !dbg !43
  %937 = shl nuw nsw i32 %936, 6, !dbg !43
  %938 = or disjoint i32 %937, %932, !dbg !43
  %939 = or disjoint i32 %938, 12288, !dbg !43
  %940 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %939, !dbg !43
  %941 = load <8 x half>, ptr addrspace(3) %940, align 16, !dbg !43
  %942 = xor i32 %930, %59, !dbg !43
  %943 = or disjoint i32 %937, %942, !dbg !43
  %944 = or disjoint i32 %943, 12288, !dbg !43
  %945 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %944, !dbg !43
  %946 = load <8 x half>, ptr addrspace(3) %945, align 16, !dbg !43
  %947 = or disjoint i32 %938, 8192, !dbg !43
  %948 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %947, !dbg !43
  %949 = load <8 x half>, ptr addrspace(3) %948, align 16, !dbg !43
  %950 = or disjoint i32 %943, 8192, !dbg !43
  %951 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %950, !dbg !43
  %952 = load <8 x half>, ptr addrspace(3) %951, align 16, !dbg !43
  %953 = or disjoint i32 %938, 4096, !dbg !43
  %954 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %953, !dbg !43
  %955 = load <8 x half>, ptr addrspace(3) %954, align 16, !dbg !43
  %956 = or disjoint i32 %943, 4096, !dbg !43
  %957 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %956, !dbg !43
  %958 = load <8 x half>, ptr addrspace(3) %957, align 16, !dbg !43
  %959 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %938, !dbg !43
  %960 = load <8 x half>, ptr addrspace(3) %959, align 16, !dbg !43
  %961 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %943, !dbg !43
  %962 = load <8 x half>, ptr addrspace(3) %961, align 16, !dbg !43
  %963 = lshr i32 %32, 4, !dbg !37
  %964 = and i32 %963, 16, !dbg !37
  %965 = or disjoint i32 %964, %933, !dbg !37
  %966 = shl nuw nsw i32 %965, 6, !dbg !37
  %967 = or disjoint i32 %966, %932, !dbg !37
  %968 = or disjoint i32 %967, 14336, !dbg !37
  %969 = getelementptr half, ptr addrspace(3) @global_smem, i32 %968, !dbg !37
  %970 = load <8 x half>, ptr addrspace(3) %969, align 16, !dbg !37
  %971 = or disjoint i32 %966, %942, !dbg !37
  %972 = or disjoint i32 %971, 14336, !dbg !37
  %973 = getelementptr half, ptr addrspace(3) @global_smem, i32 %972, !dbg !37
  %974 = load <8 x half>, ptr addrspace(3) %973, align 16, !dbg !37
  %975 = or disjoint i32 %967, 12288, !dbg !37
  %976 = getelementptr half, ptr addrspace(3) @global_smem, i32 %975, !dbg !37
  %977 = load <8 x half>, ptr addrspace(3) %976, align 16, !dbg !37
  %978 = or disjoint i32 %971, 12288, !dbg !37
  %979 = getelementptr half, ptr addrspace(3) @global_smem, i32 %978, !dbg !37
  %980 = load <8 x half>, ptr addrspace(3) %979, align 16, !dbg !37
  %981 = or disjoint i32 %967, 10240, !dbg !37
  %982 = getelementptr half, ptr addrspace(3) @global_smem, i32 %981, !dbg !37
  %983 = load <8 x half>, ptr addrspace(3) %982, align 16, !dbg !37
  %984 = or disjoint i32 %971, 10240, !dbg !37
  %985 = getelementptr half, ptr addrspace(3) @global_smem, i32 %984, !dbg !37
  %986 = load <8 x half>, ptr addrspace(3) %985, align 16, !dbg !37
  %987 = or disjoint i32 %967, 8192, !dbg !37
  %988 = getelementptr half, ptr addrspace(3) @global_smem, i32 %987, !dbg !37
  %989 = load <8 x half>, ptr addrspace(3) %988, align 16, !dbg !37
  %990 = or disjoint i32 %971, 8192, !dbg !37
  %991 = getelementptr half, ptr addrspace(3) @global_smem, i32 %990, !dbg !37
  %992 = load <8 x half>, ptr addrspace(3) %991, align 16, !dbg !37
  %993 = or disjoint i32 %967, 6144, !dbg !37
  %994 = getelementptr half, ptr addrspace(3) @global_smem, i32 %993, !dbg !37
  %995 = load <8 x half>, ptr addrspace(3) %994, align 16, !dbg !37
  %996 = or disjoint i32 %971, 6144, !dbg !37
  %997 = getelementptr half, ptr addrspace(3) @global_smem, i32 %996, !dbg !37
  %998 = load <8 x half>, ptr addrspace(3) %997, align 16, !dbg !37
  %999 = or disjoint i32 %967, 4096, !dbg !37
  %1000 = getelementptr half, ptr addrspace(3) @global_smem, i32 %999, !dbg !37
  %1001 = load <8 x half>, ptr addrspace(3) %1000, align 16, !dbg !37
  %1002 = or disjoint i32 %971, 4096, !dbg !37
  %1003 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1002, !dbg !37
  %1004 = load <8 x half>, ptr addrspace(3) %1003, align 16, !dbg !37
  %1005 = or disjoint i32 %967, 2048, !dbg !37
  %1006 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1005, !dbg !37
  %1007 = load <8 x half>, ptr addrspace(3) %1006, align 16, !dbg !37
  %1008 = or disjoint i32 %971, 2048, !dbg !37
  %1009 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1008, !dbg !37
  %1010 = load <8 x half>, ptr addrspace(3) %1009, align 16, !dbg !37
  %1011 = getelementptr half, ptr addrspace(3) @global_smem, i32 %967, !dbg !37
  %1012 = load <8 x half>, ptr addrspace(3) %1011, align 16, !dbg !37
  %1013 = getelementptr half, ptr addrspace(3) @global_smem, i32 %971, !dbg !37
  %1014 = load <8 x half>, ptr addrspace(3) %1013, align 16, !dbg !37
  %1015 = shufflevector <8 x half> %1014, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1016 = shufflevector <8 x half> %1014, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1017 = shufflevector <8 x half> %1012, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1018 = shufflevector <8 x half> %1012, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1019 = shufflevector <8 x half> %1010, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1020 = shufflevector <8 x half> %1010, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1021 = shufflevector <8 x half> %1007, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1022 = shufflevector <8 x half> %1007, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1023 = shufflevector <8 x half> %1004, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1024 = shufflevector <8 x half> %1004, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1025 = shufflevector <8 x half> %1001, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1026 = shufflevector <8 x half> %1001, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1027 = shufflevector <8 x half> %998, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1028 = shufflevector <8 x half> %998, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1029 = shufflevector <8 x half> %995, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1030 = shufflevector <8 x half> %995, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1031 = shufflevector <8 x half> %992, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1032 = shufflevector <8 x half> %992, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1033 = shufflevector <8 x half> %989, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1034 = shufflevector <8 x half> %989, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1035 = shufflevector <8 x half> %986, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1036 = shufflevector <8 x half> %986, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1037 = shufflevector <8 x half> %983, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1038 = shufflevector <8 x half> %983, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1039 = shufflevector <8 x half> %980, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1040 = shufflevector <8 x half> %980, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1041 = shufflevector <8 x half> %977, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1042 = shufflevector <8 x half> %977, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1043 = shufflevector <8 x half> %974, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1044 = shufflevector <8 x half> %974, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1045 = shufflevector <8 x half> %970, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1046 = shufflevector <8 x half> %970, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1047 = shufflevector <8 x half> %962, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1048 = shufflevector <8 x half> %962, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1049 = shufflevector <8 x half> %960, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1050 = shufflevector <8 x half> %960, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1051 = shufflevector <8 x half> %958, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1052 = shufflevector <8 x half> %958, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1053 = shufflevector <8 x half> %955, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1054 = shufflevector <8 x half> %955, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1055 = shufflevector <8 x half> %952, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1056 = shufflevector <8 x half> %952, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1057 = shufflevector <8 x half> %949, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1058 = shufflevector <8 x half> %949, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1059 = shufflevector <8 x half> %946, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1060 = shufflevector <8 x half> %946, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1061 = shufflevector <8 x half> %941, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %1062 = shufflevector <8 x half> %941, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %1063 = insertelement <4 x float> poison, float %800, i64 0, !dbg !59
  %1064 = insertelement <4 x float> %1063, float %801, i64 1, !dbg !59
  %1065 = insertelement <4 x float> %1064, float %802, i64 2, !dbg !59
  %1066 = insertelement <4 x float> %1065, float %803, i64 3, !dbg !59
  %1067 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1015, <4 x float> %1066, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1068 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1016, <4 x float> %1067, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1069 = insertelement <4 x float> poison, float %804, i64 0, !dbg !59
  %1070 = insertelement <4 x float> %1069, float %805, i64 1, !dbg !59
  %1071 = insertelement <4 x float> %1070, float %806, i64 2, !dbg !59
  %1072 = insertelement <4 x float> %1071, float %807, i64 3, !dbg !59
  %1073 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1015, <4 x float> %1072, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1074 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1016, <4 x float> %1073, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1075 = insertelement <4 x float> poison, float %816, i64 0, !dbg !59
  %1076 = insertelement <4 x float> %1075, float %817, i64 1, !dbg !59
  %1077 = insertelement <4 x float> %1076, float %818, i64 2, !dbg !59
  %1078 = insertelement <4 x float> %1077, float %819, i64 3, !dbg !59
  %1079 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1019, <4 x float> %1078, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1080 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1020, <4 x float> %1079, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1081 = insertelement <4 x float> poison, float %820, i64 0, !dbg !59
  %1082 = insertelement <4 x float> %1081, float %821, i64 1, !dbg !59
  %1083 = insertelement <4 x float> %1082, float %822, i64 2, !dbg !59
  %1084 = insertelement <4 x float> %1083, float %823, i64 3, !dbg !59
  %1085 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1019, <4 x float> %1084, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1086 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1020, <4 x float> %1085, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1087 = insertelement <4 x float> poison, float %808, i64 0, !dbg !59
  %1088 = insertelement <4 x float> %1087, float %809, i64 1, !dbg !59
  %1089 = insertelement <4 x float> %1088, float %810, i64 2, !dbg !59
  %1090 = insertelement <4 x float> %1089, float %811, i64 3, !dbg !59
  %1091 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1015, <4 x float> %1090, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1092 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1016, <4 x float> %1091, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1093 = insertelement <4 x float> poison, float %812, i64 0, !dbg !59
  %1094 = insertelement <4 x float> %1093, float %813, i64 1, !dbg !59
  %1095 = insertelement <4 x float> %1094, float %814, i64 2, !dbg !59
  %1096 = insertelement <4 x float> %1095, float %815, i64 3, !dbg !59
  %1097 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1015, <4 x float> %1096, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1098 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1016, <4 x float> %1097, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1099 = insertelement <4 x float> poison, float %824, i64 0, !dbg !59
  %1100 = insertelement <4 x float> %1099, float %825, i64 1, !dbg !59
  %1101 = insertelement <4 x float> %1100, float %826, i64 2, !dbg !59
  %1102 = insertelement <4 x float> %1101, float %827, i64 3, !dbg !59
  %1103 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1019, <4 x float> %1102, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1104 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1020, <4 x float> %1103, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1105 = insertelement <4 x float> poison, float %828, i64 0, !dbg !59
  %1106 = insertelement <4 x float> %1105, float %829, i64 1, !dbg !59
  %1107 = insertelement <4 x float> %1106, float %830, i64 2, !dbg !59
  %1108 = insertelement <4 x float> %1107, float %831, i64 3, !dbg !59
  %1109 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1019, <4 x float> %1108, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1110 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1020, <4 x float> %1109, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1111 = insertelement <4 x float> poison, float %832, i64 0, !dbg !59
  %1112 = insertelement <4 x float> %1111, float %833, i64 1, !dbg !59
  %1113 = insertelement <4 x float> %1112, float %834, i64 2, !dbg !59
  %1114 = insertelement <4 x float> %1113, float %835, i64 3, !dbg !59
  %1115 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1023, <4 x float> %1114, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1116 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1024, <4 x float> %1115, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1117 = insertelement <4 x float> poison, float %836, i64 0, !dbg !59
  %1118 = insertelement <4 x float> %1117, float %837, i64 1, !dbg !59
  %1119 = insertelement <4 x float> %1118, float %838, i64 2, !dbg !59
  %1120 = insertelement <4 x float> %1119, float %839, i64 3, !dbg !59
  %1121 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1023, <4 x float> %1120, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1122 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1024, <4 x float> %1121, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1123 = insertelement <4 x float> poison, float %848, i64 0, !dbg !59
  %1124 = insertelement <4 x float> %1123, float %849, i64 1, !dbg !59
  %1125 = insertelement <4 x float> %1124, float %850, i64 2, !dbg !59
  %1126 = insertelement <4 x float> %1125, float %851, i64 3, !dbg !59
  %1127 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1027, <4 x float> %1126, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1128 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1028, <4 x float> %1127, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1129 = insertelement <4 x float> poison, float %852, i64 0, !dbg !59
  %1130 = insertelement <4 x float> %1129, float %853, i64 1, !dbg !59
  %1131 = insertelement <4 x float> %1130, float %854, i64 2, !dbg !59
  %1132 = insertelement <4 x float> %1131, float %855, i64 3, !dbg !59
  %1133 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1027, <4 x float> %1132, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1134 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1028, <4 x float> %1133, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1135 = insertelement <4 x float> poison, float %840, i64 0, !dbg !59
  %1136 = insertelement <4 x float> %1135, float %841, i64 1, !dbg !59
  %1137 = insertelement <4 x float> %1136, float %842, i64 2, !dbg !59
  %1138 = insertelement <4 x float> %1137, float %843, i64 3, !dbg !59
  %1139 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1023, <4 x float> %1138, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1140 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1024, <4 x float> %1139, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1141 = insertelement <4 x float> poison, float %844, i64 0, !dbg !59
  %1142 = insertelement <4 x float> %1141, float %845, i64 1, !dbg !59
  %1143 = insertelement <4 x float> %1142, float %846, i64 2, !dbg !59
  %1144 = insertelement <4 x float> %1143, float %847, i64 3, !dbg !59
  %1145 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1023, <4 x float> %1144, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1146 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1024, <4 x float> %1145, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1147 = insertelement <4 x float> poison, float %856, i64 0, !dbg !59
  %1148 = insertelement <4 x float> %1147, float %857, i64 1, !dbg !59
  %1149 = insertelement <4 x float> %1148, float %858, i64 2, !dbg !59
  %1150 = insertelement <4 x float> %1149, float %859, i64 3, !dbg !59
  %1151 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1027, <4 x float> %1150, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1152 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1028, <4 x float> %1151, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1153 = insertelement <4 x float> poison, float %860, i64 0, !dbg !59
  %1154 = insertelement <4 x float> %1153, float %861, i64 1, !dbg !59
  %1155 = insertelement <4 x float> %1154, float %862, i64 2, !dbg !59
  %1156 = insertelement <4 x float> %1155, float %863, i64 3, !dbg !59
  %1157 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1027, <4 x float> %1156, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1158 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1028, <4 x float> %1157, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1159 = insertelement <4 x float> poison, float %864, i64 0, !dbg !59
  %1160 = insertelement <4 x float> %1159, float %865, i64 1, !dbg !59
  %1161 = insertelement <4 x float> %1160, float %866, i64 2, !dbg !59
  %1162 = insertelement <4 x float> %1161, float %867, i64 3, !dbg !59
  %1163 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1031, <4 x float> %1162, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1164 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1032, <4 x float> %1163, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1165 = insertelement <4 x float> poison, float %868, i64 0, !dbg !59
  %1166 = insertelement <4 x float> %1165, float %869, i64 1, !dbg !59
  %1167 = insertelement <4 x float> %1166, float %870, i64 2, !dbg !59
  %1168 = insertelement <4 x float> %1167, float %871, i64 3, !dbg !59
  %1169 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1031, <4 x float> %1168, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1170 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1032, <4 x float> %1169, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1171 = insertelement <4 x float> poison, float %880, i64 0, !dbg !59
  %1172 = insertelement <4 x float> %1171, float %881, i64 1, !dbg !59
  %1173 = insertelement <4 x float> %1172, float %882, i64 2, !dbg !59
  %1174 = insertelement <4 x float> %1173, float %883, i64 3, !dbg !59
  %1175 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1035, <4 x float> %1174, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1176 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1036, <4 x float> %1175, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1177 = insertelement <4 x float> poison, float %884, i64 0, !dbg !59
  %1178 = insertelement <4 x float> %1177, float %885, i64 1, !dbg !59
  %1179 = insertelement <4 x float> %1178, float %886, i64 2, !dbg !59
  %1180 = insertelement <4 x float> %1179, float %887, i64 3, !dbg !59
  %1181 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1035, <4 x float> %1180, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1182 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1036, <4 x float> %1181, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1183 = insertelement <4 x float> poison, float %872, i64 0, !dbg !59
  %1184 = insertelement <4 x float> %1183, float %873, i64 1, !dbg !59
  %1185 = insertelement <4 x float> %1184, float %874, i64 2, !dbg !59
  %1186 = insertelement <4 x float> %1185, float %875, i64 3, !dbg !59
  %1187 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1031, <4 x float> %1186, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1188 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1032, <4 x float> %1187, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1189 = insertelement <4 x float> poison, float %876, i64 0, !dbg !59
  %1190 = insertelement <4 x float> %1189, float %877, i64 1, !dbg !59
  %1191 = insertelement <4 x float> %1190, float %878, i64 2, !dbg !59
  %1192 = insertelement <4 x float> %1191, float %879, i64 3, !dbg !59
  %1193 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1031, <4 x float> %1192, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1194 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1032, <4 x float> %1193, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1195 = insertelement <4 x float> poison, float %888, i64 0, !dbg !59
  %1196 = insertelement <4 x float> %1195, float %889, i64 1, !dbg !59
  %1197 = insertelement <4 x float> %1196, float %890, i64 2, !dbg !59
  %1198 = insertelement <4 x float> %1197, float %891, i64 3, !dbg !59
  %1199 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1035, <4 x float> %1198, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1200 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1036, <4 x float> %1199, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1201 = insertelement <4 x float> poison, float %892, i64 0, !dbg !59
  %1202 = insertelement <4 x float> %1201, float %893, i64 1, !dbg !59
  %1203 = insertelement <4 x float> %1202, float %894, i64 2, !dbg !59
  %1204 = insertelement <4 x float> %1203, float %895, i64 3, !dbg !59
  %1205 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1035, <4 x float> %1204, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1206 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1036, <4 x float> %1205, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1207 = insertelement <4 x float> poison, float %896, i64 0, !dbg !59
  %1208 = insertelement <4 x float> %1207, float %897, i64 1, !dbg !59
  %1209 = insertelement <4 x float> %1208, float %898, i64 2, !dbg !59
  %1210 = insertelement <4 x float> %1209, float %899, i64 3, !dbg !59
  %1211 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1039, <4 x float> %1210, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1212 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1040, <4 x float> %1211, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1213 = insertelement <4 x float> poison, float %900, i64 0, !dbg !59
  %1214 = insertelement <4 x float> %1213, float %901, i64 1, !dbg !59
  %1215 = insertelement <4 x float> %1214, float %902, i64 2, !dbg !59
  %1216 = insertelement <4 x float> %1215, float %903, i64 3, !dbg !59
  %1217 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1039, <4 x float> %1216, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1218 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1040, <4 x float> %1217, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1219 = insertelement <4 x float> poison, float %912, i64 0, !dbg !59
  %1220 = insertelement <4 x float> %1219, float %913, i64 1, !dbg !59
  %1221 = insertelement <4 x float> %1220, float %914, i64 2, !dbg !59
  %1222 = insertelement <4 x float> %1221, float %915, i64 3, !dbg !59
  %1223 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1047, <4 x half> %1043, <4 x float> %1222, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1224 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1048, <4 x half> %1044, <4 x float> %1223, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1225 = insertelement <4 x float> poison, float %916, i64 0, !dbg !59
  %1226 = insertelement <4 x float> %1225, float %917, i64 1, !dbg !59
  %1227 = insertelement <4 x float> %1226, float %918, i64 2, !dbg !59
  %1228 = insertelement <4 x float> %1227, float %919, i64 3, !dbg !59
  %1229 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1051, <4 x half> %1043, <4 x float> %1228, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1230 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1052, <4 x half> %1044, <4 x float> %1229, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1231 = insertelement <4 x float> poison, float %904, i64 0, !dbg !59
  %1232 = insertelement <4 x float> %1231, float %905, i64 1, !dbg !59
  %1233 = insertelement <4 x float> %1232, float %906, i64 2, !dbg !59
  %1234 = insertelement <4 x float> %1233, float %907, i64 3, !dbg !59
  %1235 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1039, <4 x float> %1234, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1236 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1040, <4 x float> %1235, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1237 = insertelement <4 x float> poison, float %908, i64 0, !dbg !59
  %1238 = insertelement <4 x float> %1237, float %909, i64 1, !dbg !59
  %1239 = insertelement <4 x float> %1238, float %910, i64 2, !dbg !59
  %1240 = insertelement <4 x float> %1239, float %911, i64 3, !dbg !59
  %1241 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1039, <4 x float> %1240, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1242 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1040, <4 x float> %1241, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1243 = insertelement <4 x float> poison, float %920, i64 0, !dbg !59
  %1244 = insertelement <4 x float> %1243, float %921, i64 1, !dbg !59
  %1245 = insertelement <4 x float> %1244, float %922, i64 2, !dbg !59
  %1246 = insertelement <4 x float> %1245, float %923, i64 3, !dbg !59
  %1247 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1055, <4 x half> %1043, <4 x float> %1246, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1248 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1056, <4 x half> %1044, <4 x float> %1247, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1249 = insertelement <4 x float> poison, float %924, i64 0, !dbg !59
  %1250 = insertelement <4 x float> %1249, float %925, i64 1, !dbg !59
  %1251 = insertelement <4 x float> %1250, float %926, i64 2, !dbg !59
  %1252 = insertelement <4 x float> %1251, float %927, i64 3, !dbg !59
  %1253 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1059, <4 x half> %1043, <4 x float> %1252, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1254 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1060, <4 x half> %1044, <4 x float> %1253, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1255 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1017, <4 x float> %1068, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1256 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1018, <4 x float> %1255, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1257 = extractelement <4 x float> %1256, i64 0, !dbg !59
  %1258 = extractelement <4 x float> %1256, i64 1, !dbg !59
  %1259 = extractelement <4 x float> %1256, i64 2, !dbg !59
  %1260 = extractelement <4 x float> %1256, i64 3, !dbg !59
  %1261 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1017, <4 x float> %1074, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1262 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1018, <4 x float> %1261, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1263 = extractelement <4 x float> %1262, i64 0, !dbg !59
  %1264 = extractelement <4 x float> %1262, i64 1, !dbg !59
  %1265 = extractelement <4 x float> %1262, i64 2, !dbg !59
  %1266 = extractelement <4 x float> %1262, i64 3, !dbg !59
  %1267 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1021, <4 x float> %1080, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1268 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1022, <4 x float> %1267, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1269 = extractelement <4 x float> %1268, i64 0, !dbg !59
  %1270 = extractelement <4 x float> %1268, i64 1, !dbg !59
  %1271 = extractelement <4 x float> %1268, i64 2, !dbg !59
  %1272 = extractelement <4 x float> %1268, i64 3, !dbg !59
  %1273 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1021, <4 x float> %1086, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1274 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1022, <4 x float> %1273, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1275 = extractelement <4 x float> %1274, i64 0, !dbg !59
  %1276 = extractelement <4 x float> %1274, i64 1, !dbg !59
  %1277 = extractelement <4 x float> %1274, i64 2, !dbg !59
  %1278 = extractelement <4 x float> %1274, i64 3, !dbg !59
  %1279 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1017, <4 x float> %1092, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1280 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1018, <4 x float> %1279, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1281 = extractelement <4 x float> %1280, i64 0, !dbg !59
  %1282 = extractelement <4 x float> %1280, i64 1, !dbg !59
  %1283 = extractelement <4 x float> %1280, i64 2, !dbg !59
  %1284 = extractelement <4 x float> %1280, i64 3, !dbg !59
  %1285 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1017, <4 x float> %1098, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1286 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1018, <4 x float> %1285, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1287 = extractelement <4 x float> %1286, i64 0, !dbg !59
  %1288 = extractelement <4 x float> %1286, i64 1, !dbg !59
  %1289 = extractelement <4 x float> %1286, i64 2, !dbg !59
  %1290 = extractelement <4 x float> %1286, i64 3, !dbg !59
  %1291 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1021, <4 x float> %1104, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1292 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1022, <4 x float> %1291, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1293 = extractelement <4 x float> %1292, i64 0, !dbg !59
  %1294 = extractelement <4 x float> %1292, i64 1, !dbg !59
  %1295 = extractelement <4 x float> %1292, i64 2, !dbg !59
  %1296 = extractelement <4 x float> %1292, i64 3, !dbg !59
  %1297 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1021, <4 x float> %1110, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1298 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1022, <4 x float> %1297, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1299 = extractelement <4 x float> %1298, i64 0, !dbg !59
  %1300 = extractelement <4 x float> %1298, i64 1, !dbg !59
  %1301 = extractelement <4 x float> %1298, i64 2, !dbg !59
  %1302 = extractelement <4 x float> %1298, i64 3, !dbg !59
  %1303 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1025, <4 x float> %1116, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1304 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1026, <4 x float> %1303, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1305 = extractelement <4 x float> %1304, i64 0, !dbg !59
  %1306 = extractelement <4 x float> %1304, i64 1, !dbg !59
  %1307 = extractelement <4 x float> %1304, i64 2, !dbg !59
  %1308 = extractelement <4 x float> %1304, i64 3, !dbg !59
  %1309 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1025, <4 x float> %1122, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1310 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1026, <4 x float> %1309, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1311 = extractelement <4 x float> %1310, i64 0, !dbg !59
  %1312 = extractelement <4 x float> %1310, i64 1, !dbg !59
  %1313 = extractelement <4 x float> %1310, i64 2, !dbg !59
  %1314 = extractelement <4 x float> %1310, i64 3, !dbg !59
  %1315 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1029, <4 x float> %1128, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1316 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1030, <4 x float> %1315, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1317 = extractelement <4 x float> %1316, i64 0, !dbg !59
  %1318 = extractelement <4 x float> %1316, i64 1, !dbg !59
  %1319 = extractelement <4 x float> %1316, i64 2, !dbg !59
  %1320 = extractelement <4 x float> %1316, i64 3, !dbg !59
  %1321 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1029, <4 x float> %1134, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1322 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1030, <4 x float> %1321, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1323 = extractelement <4 x float> %1322, i64 0, !dbg !59
  %1324 = extractelement <4 x float> %1322, i64 1, !dbg !59
  %1325 = extractelement <4 x float> %1322, i64 2, !dbg !59
  %1326 = extractelement <4 x float> %1322, i64 3, !dbg !59
  %1327 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1025, <4 x float> %1140, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1328 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1026, <4 x float> %1327, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1329 = extractelement <4 x float> %1328, i64 0, !dbg !59
  %1330 = extractelement <4 x float> %1328, i64 1, !dbg !59
  %1331 = extractelement <4 x float> %1328, i64 2, !dbg !59
  %1332 = extractelement <4 x float> %1328, i64 3, !dbg !59
  %1333 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1025, <4 x float> %1146, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1334 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1026, <4 x float> %1333, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1335 = extractelement <4 x float> %1334, i64 0, !dbg !59
  %1336 = extractelement <4 x float> %1334, i64 1, !dbg !59
  %1337 = extractelement <4 x float> %1334, i64 2, !dbg !59
  %1338 = extractelement <4 x float> %1334, i64 3, !dbg !59
  %1339 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1029, <4 x float> %1152, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1340 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1030, <4 x float> %1339, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1341 = extractelement <4 x float> %1340, i64 0, !dbg !59
  %1342 = extractelement <4 x float> %1340, i64 1, !dbg !59
  %1343 = extractelement <4 x float> %1340, i64 2, !dbg !59
  %1344 = extractelement <4 x float> %1340, i64 3, !dbg !59
  %1345 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1029, <4 x float> %1158, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1346 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1030, <4 x float> %1345, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1347 = extractelement <4 x float> %1346, i64 0, !dbg !59
  %1348 = extractelement <4 x float> %1346, i64 1, !dbg !59
  %1349 = extractelement <4 x float> %1346, i64 2, !dbg !59
  %1350 = extractelement <4 x float> %1346, i64 3, !dbg !59
  %1351 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1033, <4 x float> %1164, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1352 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1034, <4 x float> %1351, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1353 = extractelement <4 x float> %1352, i64 0, !dbg !59
  %1354 = extractelement <4 x float> %1352, i64 1, !dbg !59
  %1355 = extractelement <4 x float> %1352, i64 2, !dbg !59
  %1356 = extractelement <4 x float> %1352, i64 3, !dbg !59
  %1357 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1033, <4 x float> %1170, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1358 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1034, <4 x float> %1357, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1359 = extractelement <4 x float> %1358, i64 0, !dbg !59
  %1360 = extractelement <4 x float> %1358, i64 1, !dbg !59
  %1361 = extractelement <4 x float> %1358, i64 2, !dbg !59
  %1362 = extractelement <4 x float> %1358, i64 3, !dbg !59
  %1363 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1037, <4 x float> %1176, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1364 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1038, <4 x float> %1363, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1365 = extractelement <4 x float> %1364, i64 0, !dbg !59
  %1366 = extractelement <4 x float> %1364, i64 1, !dbg !59
  %1367 = extractelement <4 x float> %1364, i64 2, !dbg !59
  %1368 = extractelement <4 x float> %1364, i64 3, !dbg !59
  %1369 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1037, <4 x float> %1182, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1370 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1038, <4 x float> %1369, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1371 = extractelement <4 x float> %1370, i64 0, !dbg !59
  %1372 = extractelement <4 x float> %1370, i64 1, !dbg !59
  %1373 = extractelement <4 x float> %1370, i64 2, !dbg !59
  %1374 = extractelement <4 x float> %1370, i64 3, !dbg !59
  %1375 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1033, <4 x float> %1188, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1376 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1034, <4 x float> %1375, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1377 = extractelement <4 x float> %1376, i64 0, !dbg !59
  %1378 = extractelement <4 x float> %1376, i64 1, !dbg !59
  %1379 = extractelement <4 x float> %1376, i64 2, !dbg !59
  %1380 = extractelement <4 x float> %1376, i64 3, !dbg !59
  %1381 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1033, <4 x float> %1194, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1382 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1034, <4 x float> %1381, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1383 = extractelement <4 x float> %1382, i64 0, !dbg !59
  %1384 = extractelement <4 x float> %1382, i64 1, !dbg !59
  %1385 = extractelement <4 x float> %1382, i64 2, !dbg !59
  %1386 = extractelement <4 x float> %1382, i64 3, !dbg !59
  %1387 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1037, <4 x float> %1200, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1388 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1038, <4 x float> %1387, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1389 = extractelement <4 x float> %1388, i64 0, !dbg !59
  %1390 = extractelement <4 x float> %1388, i64 1, !dbg !59
  %1391 = extractelement <4 x float> %1388, i64 2, !dbg !59
  %1392 = extractelement <4 x float> %1388, i64 3, !dbg !59
  %1393 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1037, <4 x float> %1206, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1394 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1038, <4 x float> %1393, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1395 = extractelement <4 x float> %1394, i64 0, !dbg !59
  %1396 = extractelement <4 x float> %1394, i64 1, !dbg !59
  %1397 = extractelement <4 x float> %1394, i64 2, !dbg !59
  %1398 = extractelement <4 x float> %1394, i64 3, !dbg !59
  %1399 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1041, <4 x float> %1212, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1400 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1042, <4 x float> %1399, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1401 = extractelement <4 x float> %1400, i64 0, !dbg !59
  %1402 = extractelement <4 x float> %1400, i64 1, !dbg !59
  %1403 = extractelement <4 x float> %1400, i64 2, !dbg !59
  %1404 = extractelement <4 x float> %1400, i64 3, !dbg !59
  %1405 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1041, <4 x float> %1218, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1406 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1042, <4 x float> %1405, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1407 = extractelement <4 x float> %1406, i64 0, !dbg !59
  %1408 = extractelement <4 x float> %1406, i64 1, !dbg !59
  %1409 = extractelement <4 x float> %1406, i64 2, !dbg !59
  %1410 = extractelement <4 x float> %1406, i64 3, !dbg !59
  %1411 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1049, <4 x half> %1045, <4 x float> %1224, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1412 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1050, <4 x half> %1046, <4 x float> %1411, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1413 = extractelement <4 x float> %1412, i64 0, !dbg !59
  %1414 = extractelement <4 x float> %1412, i64 1, !dbg !59
  %1415 = extractelement <4 x float> %1412, i64 2, !dbg !59
  %1416 = extractelement <4 x float> %1412, i64 3, !dbg !59
  %1417 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1053, <4 x half> %1045, <4 x float> %1230, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1418 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1054, <4 x half> %1046, <4 x float> %1417, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1419 = extractelement <4 x float> %1418, i64 0, !dbg !59
  %1420 = extractelement <4 x float> %1418, i64 1, !dbg !59
  %1421 = extractelement <4 x float> %1418, i64 2, !dbg !59
  %1422 = extractelement <4 x float> %1418, i64 3, !dbg !59
  %1423 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1041, <4 x float> %1236, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1424 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1042, <4 x float> %1423, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1425 = extractelement <4 x float> %1424, i64 0, !dbg !59
  %1426 = extractelement <4 x float> %1424, i64 1, !dbg !59
  %1427 = extractelement <4 x float> %1424, i64 2, !dbg !59
  %1428 = extractelement <4 x float> %1424, i64 3, !dbg !59
  %1429 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1041, <4 x float> %1242, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1430 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1042, <4 x float> %1429, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1431 = extractelement <4 x float> %1430, i64 0, !dbg !59
  %1432 = extractelement <4 x float> %1430, i64 1, !dbg !59
  %1433 = extractelement <4 x float> %1430, i64 2, !dbg !59
  %1434 = extractelement <4 x float> %1430, i64 3, !dbg !59
  %1435 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1057, <4 x half> %1045, <4 x float> %1248, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1436 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1058, <4 x half> %1046, <4 x float> %1435, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1437 = extractelement <4 x float> %1436, i64 0, !dbg !59
  %1438 = extractelement <4 x float> %1436, i64 1, !dbg !59
  %1439 = extractelement <4 x float> %1436, i64 2, !dbg !59
  %1440 = extractelement <4 x float> %1436, i64 3, !dbg !59
  %1441 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1061, <4 x half> %1045, <4 x float> %1254, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1442 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half> %1062, <4 x half> %1046, <4 x float> %1441, i32 0, i32 0, i32 0), !dbg !59
  tail call void @llvm.amdgcn.sched.barrier(i32 2038), !dbg !59
  %1443 = extractelement <4 x float> %1442, i64 0, !dbg !59
  %1444 = extractelement <4 x float> %1442, i64 1, !dbg !59
  %1445 = extractelement <4 x float> %1442, i64 2, !dbg !59
  %1446 = extractelement <4 x float> %1442, i64 3, !dbg !59
  br label %1447, !dbg !59

1447:                                             ; preds = %._crit_edge._crit_edge, %918
  %1448 = phi float [ %927, %._crit_edge._crit_edge ], [ %1446, %928 ], !dbg !36
  %1449 = phi float [ %926, %._crit_edge._crit_edge ], [ %1445, %928 ], !dbg !36
  %1450 = phi float [ %925, %._crit_edge._crit_edge ], [ %1444, %928 ], !dbg !36
  %1451 = phi float [ %924, %._crit_edge._crit_edge ], [ %1443, %928 ], !dbg !36
  %1452 = phi float [ %923, %._crit_edge._crit_edge ], [ %1440, %928 ], !dbg !36
  %1453 = phi float [ %922, %._crit_edge._crit_edge ], [ %1439, %928 ], !dbg !36
  %1454 = phi float [ %921, %._crit_edge._crit_edge ], [ %1438, %928 ], !dbg !36
  %1455 = phi float [ %920, %._crit_edge._crit_edge ], [ %1437, %928 ], !dbg !36
  %1456 = phi float [ %919, %._crit_edge._crit_edge ], [ %1422, %928 ], !dbg !36
  %1457 = phi float [ %918, %._crit_edge._crit_edge ], [ %1421, %928 ], !dbg !36
  %1458 = phi float [ %917, %._crit_edge._crit_edge ], [ %1420, %928 ], !dbg !36
  %1459 = phi float [ %916, %._crit_edge._crit_edge ], [ %1419, %928 ], !dbg !36
  %1460 = phi float [ %915, %._crit_edge._crit_edge ], [ %1416, %928 ], !dbg !36
  %1461 = phi float [ %914, %._crit_edge._crit_edge ], [ %1415, %928 ], !dbg !36
  %1462 = phi float [ %913, %._crit_edge._crit_edge ], [ %1414, %928 ], !dbg !36
  %1463 = phi float [ %912, %._crit_edge._crit_edge ], [ %1413, %928 ], !dbg !36
  %1464 = phi float [ %911, %._crit_edge._crit_edge ], [ %1434, %928 ], !dbg !36
  %1465 = phi float [ %910, %._crit_edge._crit_edge ], [ %1433, %928 ], !dbg !36
  %1466 = phi float [ %909, %._crit_edge._crit_edge ], [ %1432, %928 ], !dbg !36
  %1467 = phi float [ %908, %._crit_edge._crit_edge ], [ %1431, %928 ], !dbg !36
  %1468 = phi float [ %907, %._crit_edge._crit_edge ], [ %1428, %928 ], !dbg !36
  %1469 = phi float [ %906, %._crit_edge._crit_edge ], [ %1427, %928 ], !dbg !36
  %1470 = phi float [ %905, %._crit_edge._crit_edge ], [ %1426, %928 ], !dbg !36
  %1471 = phi float [ %904, %._crit_edge._crit_edge ], [ %1425, %928 ], !dbg !36
  %1472 = phi float [ %903, %._crit_edge._crit_edge ], [ %1410, %928 ], !dbg !36
  %1473 = phi float [ %902, %._crit_edge._crit_edge ], [ %1409, %928 ], !dbg !36
  %1474 = phi float [ %901, %._crit_edge._crit_edge ], [ %1408, %928 ], !dbg !36
  %1475 = phi float [ %900, %._crit_edge._crit_edge ], [ %1407, %928 ], !dbg !36
  %1476 = phi float [ %899, %._crit_edge._crit_edge ], [ %1404, %928 ], !dbg !36
  %1477 = phi float [ %898, %._crit_edge._crit_edge ], [ %1403, %928 ], !dbg !36
  %1478 = phi float [ %897, %._crit_edge._crit_edge ], [ %1402, %928 ], !dbg !36
  %1479 = phi float [ %896, %._crit_edge._crit_edge ], [ %1401, %928 ], !dbg !36
  %1480 = phi float [ %895, %._crit_edge._crit_edge ], [ %1398, %928 ], !dbg !36
  %1481 = phi float [ %894, %._crit_edge._crit_edge ], [ %1397, %928 ], !dbg !36
  %1482 = phi float [ %893, %._crit_edge._crit_edge ], [ %1396, %928 ], !dbg !36
  %1483 = phi float [ %892, %._crit_edge._crit_edge ], [ %1395, %928 ], !dbg !36
  %1484 = phi float [ %891, %._crit_edge._crit_edge ], [ %1392, %928 ], !dbg !36
  %1485 = phi float [ %890, %._crit_edge._crit_edge ], [ %1391, %928 ], !dbg !36
  %1486 = phi float [ %889, %._crit_edge._crit_edge ], [ %1390, %928 ], !dbg !36
  %1487 = phi float [ %888, %._crit_edge._crit_edge ], [ %1389, %928 ], !dbg !36
  %1488 = phi float [ %887, %._crit_edge._crit_edge ], [ %1374, %928 ], !dbg !36
  %1489 = phi float [ %886, %._crit_edge._crit_edge ], [ %1373, %928 ], !dbg !36
  %1490 = phi float [ %885, %._crit_edge._crit_edge ], [ %1372, %928 ], !dbg !36
  %1491 = phi float [ %884, %._crit_edge._crit_edge ], [ %1371, %928 ], !dbg !36
  %1492 = phi float [ %883, %._crit_edge._crit_edge ], [ %1368, %928 ], !dbg !36
  %1493 = phi float [ %882, %._crit_edge._crit_edge ], [ %1367, %928 ], !dbg !36
  %1494 = phi float [ %881, %._crit_edge._crit_edge ], [ %1366, %928 ], !dbg !36
  %1495 = phi float [ %880, %._crit_edge._crit_edge ], [ %1365, %928 ], !dbg !36
  %1496 = phi float [ %879, %._crit_edge._crit_edge ], [ %1386, %928 ], !dbg !36
  %1497 = phi float [ %878, %._crit_edge._crit_edge ], [ %1385, %928 ], !dbg !36
  %1498 = phi float [ %877, %._crit_edge._crit_edge ], [ %1384, %928 ], !dbg !36
  %1499 = phi float [ %876, %._crit_edge._crit_edge ], [ %1383, %928 ], !dbg !36
  %1500 = phi float [ %875, %._crit_edge._crit_edge ], [ %1380, %928 ], !dbg !36
  %1501 = phi float [ %874, %._crit_edge._crit_edge ], [ %1379, %928 ], !dbg !36
  %1502 = phi float [ %873, %._crit_edge._crit_edge ], [ %1378, %928 ], !dbg !36
  %1503 = phi float [ %872, %._crit_edge._crit_edge ], [ %1377, %928 ], !dbg !36
  %1504 = phi float [ %871, %._crit_edge._crit_edge ], [ %1362, %928 ], !dbg !36
  %1505 = phi float [ %870, %._crit_edge._crit_edge ], [ %1361, %928 ], !dbg !36
  %1506 = phi float [ %869, %._crit_edge._crit_edge ], [ %1360, %928 ], !dbg !36
  %1507 = phi float [ %868, %._crit_edge._crit_edge ], [ %1359, %928 ], !dbg !36
  %1508 = phi float [ %867, %._crit_edge._crit_edge ], [ %1356, %928 ], !dbg !36
  %1509 = phi float [ %866, %._crit_edge._crit_edge ], [ %1355, %928 ], !dbg !36
  %1510 = phi float [ %865, %._crit_edge._crit_edge ], [ %1354, %928 ], !dbg !36
  %1511 = phi float [ %864, %._crit_edge._crit_edge ], [ %1353, %928 ], !dbg !36
  %1512 = phi float [ %863, %._crit_edge._crit_edge ], [ %1350, %928 ], !dbg !36
  %1513 = phi float [ %862, %._crit_edge._crit_edge ], [ %1349, %928 ], !dbg !36
  %1514 = phi float [ %861, %._crit_edge._crit_edge ], [ %1348, %928 ], !dbg !36
  %1515 = phi float [ %860, %._crit_edge._crit_edge ], [ %1347, %928 ], !dbg !36
  %1516 = phi float [ %859, %._crit_edge._crit_edge ], [ %1344, %928 ], !dbg !36
  %1517 = phi float [ %858, %._crit_edge._crit_edge ], [ %1343, %928 ], !dbg !36
  %1518 = phi float [ %857, %._crit_edge._crit_edge ], [ %1342, %928 ], !dbg !36
  %1519 = phi float [ %856, %._crit_edge._crit_edge ], [ %1341, %928 ], !dbg !36
  %1520 = phi float [ %855, %._crit_edge._crit_edge ], [ %1326, %928 ], !dbg !36
  %1521 = phi float [ %854, %._crit_edge._crit_edge ], [ %1325, %928 ], !dbg !36
  %1522 = phi float [ %853, %._crit_edge._crit_edge ], [ %1324, %928 ], !dbg !36
  %1523 = phi float [ %852, %._crit_edge._crit_edge ], [ %1323, %928 ], !dbg !36
  %1524 = phi float [ %851, %._crit_edge._crit_edge ], [ %1320, %928 ], !dbg !36
  %1525 = phi float [ %850, %._crit_edge._crit_edge ], [ %1319, %928 ], !dbg !36
  %1526 = phi float [ %849, %._crit_edge._crit_edge ], [ %1318, %928 ], !dbg !36
  %1527 = phi float [ %848, %._crit_edge._crit_edge ], [ %1317, %928 ], !dbg !36
  %1528 = phi float [ %847, %._crit_edge._crit_edge ], [ %1338, %928 ], !dbg !36
  %1529 = phi float [ %846, %._crit_edge._crit_edge ], [ %1337, %928 ], !dbg !36
  %1530 = phi float [ %845, %._crit_edge._crit_edge ], [ %1336, %928 ], !dbg !36
  %1531 = phi float [ %844, %._crit_edge._crit_edge ], [ %1335, %928 ], !dbg !36
  %1532 = phi float [ %843, %._crit_edge._crit_edge ], [ %1332, %928 ], !dbg !36
  %1533 = phi float [ %842, %._crit_edge._crit_edge ], [ %1331, %928 ], !dbg !36
  %1534 = phi float [ %841, %._crit_edge._crit_edge ], [ %1330, %928 ], !dbg !36
  %1535 = phi float [ %840, %._crit_edge._crit_edge ], [ %1329, %928 ], !dbg !36
  %1536 = phi float [ %839, %._crit_edge._crit_edge ], [ %1314, %928 ], !dbg !36
  %1537 = phi float [ %838, %._crit_edge._crit_edge ], [ %1313, %928 ], !dbg !36
  %1538 = phi float [ %837, %._crit_edge._crit_edge ], [ %1312, %928 ], !dbg !36
  %1539 = phi float [ %836, %._crit_edge._crit_edge ], [ %1311, %928 ], !dbg !36
  %1540 = phi float [ %835, %._crit_edge._crit_edge ], [ %1308, %928 ], !dbg !36
  %1541 = phi float [ %834, %._crit_edge._crit_edge ], [ %1307, %928 ], !dbg !36
  %1542 = phi float [ %833, %._crit_edge._crit_edge ], [ %1306, %928 ], !dbg !36
  %1543 = phi float [ %832, %._crit_edge._crit_edge ], [ %1305, %928 ], !dbg !36
  %1544 = phi float [ %831, %._crit_edge._crit_edge ], [ %1302, %928 ], !dbg !36
  %1545 = phi float [ %830, %._crit_edge._crit_edge ], [ %1301, %928 ], !dbg !36
  %1546 = phi float [ %829, %._crit_edge._crit_edge ], [ %1300, %928 ], !dbg !36
  %1547 = phi float [ %828, %._crit_edge._crit_edge ], [ %1299, %928 ], !dbg !36
  %1548 = phi float [ %827, %._crit_edge._crit_edge ], [ %1296, %928 ], !dbg !36
  %1549 = phi float [ %826, %._crit_edge._crit_edge ], [ %1295, %928 ], !dbg !36
  %1550 = phi float [ %825, %._crit_edge._crit_edge ], [ %1294, %928 ], !dbg !36
  %1551 = phi float [ %824, %._crit_edge._crit_edge ], [ %1293, %928 ], !dbg !36
  %1552 = phi float [ %823, %._crit_edge._crit_edge ], [ %1278, %928 ], !dbg !36
  %1553 = phi float [ %822, %._crit_edge._crit_edge ], [ %1277, %928 ], !dbg !36
  %1554 = phi float [ %821, %._crit_edge._crit_edge ], [ %1276, %928 ], !dbg !36
  %1555 = phi float [ %820, %._crit_edge._crit_edge ], [ %1275, %928 ], !dbg !36
  %1556 = phi float [ %819, %._crit_edge._crit_edge ], [ %1272, %928 ], !dbg !36
  %1557 = phi float [ %818, %._crit_edge._crit_edge ], [ %1271, %928 ], !dbg !36
  %1558 = phi float [ %817, %._crit_edge._crit_edge ], [ %1270, %928 ], !dbg !36
  %1559 = phi float [ %816, %._crit_edge._crit_edge ], [ %1269, %928 ], !dbg !36
  %1560 = phi float [ %815, %._crit_edge._crit_edge ], [ %1290, %928 ], !dbg !36
  %1561 = phi float [ %814, %._crit_edge._crit_edge ], [ %1289, %928 ], !dbg !36
  %1562 = phi float [ %813, %._crit_edge._crit_edge ], [ %1288, %928 ], !dbg !36
  %1563 = phi float [ %812, %._crit_edge._crit_edge ], [ %1287, %928 ], !dbg !36
  %1564 = phi float [ %811, %._crit_edge._crit_edge ], [ %1284, %928 ], !dbg !36
  %1565 = phi float [ %810, %._crit_edge._crit_edge ], [ %1283, %928 ], !dbg !36
  %1566 = phi float [ %809, %._crit_edge._crit_edge ], [ %1282, %928 ], !dbg !36
  %1567 = phi float [ %808, %._crit_edge._crit_edge ], [ %1281, %928 ], !dbg !36
  %1568 = phi float [ %807, %._crit_edge._crit_edge ], [ %1266, %928 ], !dbg !36
  %1569 = phi float [ %806, %._crit_edge._crit_edge ], [ %1265, %928 ], !dbg !36
  %1570 = phi float [ %805, %._crit_edge._crit_edge ], [ %1264, %928 ], !dbg !36
  %1571 = phi float [ %804, %._crit_edge._crit_edge ], [ %1263, %928 ], !dbg !36
  %1572 = phi float [ %803, %._crit_edge._crit_edge ], [ %1260, %928 ], !dbg !36
  %1573 = phi float [ %802, %._crit_edge._crit_edge ], [ %1259, %928 ], !dbg !36
  %1574 = phi float [ %801, %._crit_edge._crit_edge ], [ %1258, %928 ], !dbg !36
  %1575 = phi float [ %800, %._crit_edge._crit_edge ], [ %1257, %928 ], !dbg !36
  %.pre-phi = phi i32 [ %.pre, %._crit_edge._crit_edge ], [ %933, %928 ], !dbg !28
  %1576 = lshr i32 %32, 2, !dbg !28
  %1577 = and i32 %1576, 60, !dbg !28
  %1578 = or disjoint i32 %1577, %74, !dbg !40
  %1579 = or disjoint i32 %1578, 192, !dbg !40
  %1580 = or disjoint i32 %1578, 128, !dbg !40
  %1581 = or disjoint i32 %1578, 64, !dbg !40
  %1582 = lshr exact i32 %35, 4, !dbg !28
  %1583 = or disjoint i32 %1582, %.pre-phi, !dbg !28
  %1584 = or disjoint i32 %1583, 224, !dbg !28
  %1585 = or disjoint i32 %31, %1584, !dbg !29
  %1586 = or disjoint i32 %1583, 192, !dbg !28
  %1587 = or disjoint i32 %31, %1586, !dbg !29
  %1588 = or disjoint i32 %1583, 160, !dbg !28
  %1589 = or disjoint i32 %31, %1588, !dbg !29
  %1590 = or disjoint i32 %1583, 128, !dbg !28
  %1591 = or disjoint i32 %31, %1590, !dbg !29
  %1592 = or disjoint i32 %1583, 96, !dbg !28
  %1593 = or disjoint i32 %31, %1592, !dbg !29
  %1594 = or disjoint i32 %1583, 64, !dbg !28
  %1595 = or disjoint i32 %31, %1594, !dbg !29
  %1596 = or disjoint i32 %1583, 32, !dbg !28
  %1597 = or disjoint i32 %31, %1596, !dbg !29
  %1598 = or disjoint i32 %31, %1583, !dbg !29
  %1599 = fptrunc float %1575 to half, !dbg !60
  %1600 = fptrunc float %1574 to half, !dbg !60
  %1601 = fptrunc float %1573 to half, !dbg !60
  %1602 = fptrunc float %1572 to half, !dbg !60
  %1603 = fptrunc float %1571 to half, !dbg !60
  %1604 = fptrunc float %1570 to half, !dbg !60
  %1605 = fptrunc float %1569 to half, !dbg !60
  %1606 = fptrunc float %1568 to half, !dbg !60
  %1607 = fptrunc float %1567 to half, !dbg !60
  %1608 = fptrunc float %1566 to half, !dbg !60
  %1609 = fptrunc float %1565 to half, !dbg !60
  %1610 = fptrunc float %1564 to half, !dbg !60
  %1611 = fptrunc float %1563 to half, !dbg !60
  %1612 = fptrunc float %1562 to half, !dbg !60
  %1613 = fptrunc float %1561 to half, !dbg !60
  %1614 = fptrunc float %1560 to half, !dbg !60
  %1615 = fptrunc float %1559 to half, !dbg !60
  %1616 = fptrunc float %1558 to half, !dbg !60
  %1617 = fptrunc float %1557 to half, !dbg !60
  %1618 = fptrunc float %1556 to half, !dbg !60
  %1619 = fptrunc float %1555 to half, !dbg !60
  %1620 = fptrunc float %1554 to half, !dbg !60
  %1621 = fptrunc float %1553 to half, !dbg !60
  %1622 = fptrunc float %1552 to half, !dbg !60
  %1623 = fptrunc float %1551 to half, !dbg !60
  %1624 = fptrunc float %1550 to half, !dbg !60
  %1625 = fptrunc float %1549 to half, !dbg !60
  %1626 = fptrunc float %1548 to half, !dbg !60
  %1627 = fptrunc float %1547 to half, !dbg !60
  %1628 = fptrunc float %1546 to half, !dbg !60
  %1629 = fptrunc float %1545 to half, !dbg !60
  %1630 = fptrunc float %1544 to half, !dbg !60
  %1631 = fptrunc float %1543 to half, !dbg !60
  %1632 = fptrunc float %1542 to half, !dbg !60
  %1633 = fptrunc float %1541 to half, !dbg !60
  %1634 = fptrunc float %1540 to half, !dbg !60
  %1635 = fptrunc float %1539 to half, !dbg !60
  %1636 = fptrunc float %1538 to half, !dbg !60
  %1637 = fptrunc float %1537 to half, !dbg !60
  %1638 = fptrunc float %1536 to half, !dbg !60
  %1639 = fptrunc float %1535 to half, !dbg !60
  %1640 = fptrunc float %1534 to half, !dbg !60
  %1641 = fptrunc float %1533 to half, !dbg !60
  %1642 = fptrunc float %1532 to half, !dbg !60
  %1643 = fptrunc float %1531 to half, !dbg !60
  %1644 = fptrunc float %1530 to half, !dbg !60
  %1645 = fptrunc float %1529 to half, !dbg !60
  %1646 = fptrunc float %1528 to half, !dbg !60
  %1647 = fptrunc float %1527 to half, !dbg !60
  %1648 = fptrunc float %1526 to half, !dbg !60
  %1649 = fptrunc float %1525 to half, !dbg !60
  %1650 = fptrunc float %1524 to half, !dbg !60
  %1651 = fptrunc float %1523 to half, !dbg !60
  %1652 = fptrunc float %1522 to half, !dbg !60
  %1653 = fptrunc float %1521 to half, !dbg !60
  %1654 = fptrunc float %1520 to half, !dbg !60
  %1655 = fptrunc float %1519 to half, !dbg !60
  %1656 = fptrunc float %1518 to half, !dbg !60
  %1657 = fptrunc float %1517 to half, !dbg !60
  %1658 = fptrunc float %1516 to half, !dbg !60
  %1659 = fptrunc float %1515 to half, !dbg !60
  %1660 = fptrunc float %1514 to half, !dbg !60
  %1661 = fptrunc float %1513 to half, !dbg !60
  %1662 = fptrunc float %1512 to half, !dbg !60
  %1663 = fptrunc float %1511 to half, !dbg !60
  %1664 = fptrunc float %1510 to half, !dbg !60
  %1665 = fptrunc float %1509 to half, !dbg !60
  %1666 = fptrunc float %1508 to half, !dbg !60
  %1667 = fptrunc float %1507 to half, !dbg !60
  %1668 = fptrunc float %1506 to half, !dbg !60
  %1669 = fptrunc float %1505 to half, !dbg !60
  %1670 = fptrunc float %1504 to half, !dbg !60
  %1671 = fptrunc float %1503 to half, !dbg !60
  %1672 = fptrunc float %1502 to half, !dbg !60
  %1673 = fptrunc float %1501 to half, !dbg !60
  %1674 = fptrunc float %1500 to half, !dbg !60
  %1675 = fptrunc float %1499 to half, !dbg !60
  %1676 = fptrunc float %1498 to half, !dbg !60
  %1677 = fptrunc float %1497 to half, !dbg !60
  %1678 = fptrunc float %1496 to half, !dbg !60
  %1679 = fptrunc float %1495 to half, !dbg !60
  %1680 = fptrunc float %1494 to half, !dbg !60
  %1681 = fptrunc float %1493 to half, !dbg !60
  %1682 = fptrunc float %1492 to half, !dbg !60
  %1683 = fptrunc float %1491 to half, !dbg !60
  %1684 = fptrunc float %1490 to half, !dbg !60
  %1685 = fptrunc float %1489 to half, !dbg !60
  %1686 = fptrunc float %1488 to half, !dbg !60
  %1687 = fptrunc float %1487 to half, !dbg !60
  %1688 = fptrunc float %1486 to half, !dbg !60
  %1689 = fptrunc float %1485 to half, !dbg !60
  %1690 = fptrunc float %1484 to half, !dbg !60
  %1691 = fptrunc float %1483 to half, !dbg !60
  %1692 = fptrunc float %1482 to half, !dbg !60
  %1693 = fptrunc float %1481 to half, !dbg !60
  %1694 = fptrunc float %1480 to half, !dbg !60
  %1695 = fptrunc float %1479 to half, !dbg !60
  %1696 = fptrunc float %1478 to half, !dbg !60
  %1697 = fptrunc float %1477 to half, !dbg !60
  %1698 = fptrunc float %1476 to half, !dbg !60
  %1699 = fptrunc float %1475 to half, !dbg !60
  %1700 = fptrunc float %1474 to half, !dbg !60
  %1701 = fptrunc float %1473 to half, !dbg !60
  %1702 = fptrunc float %1472 to half, !dbg !60
  %1703 = fptrunc float %1471 to half, !dbg !60
  %1704 = fptrunc float %1470 to half, !dbg !60
  %1705 = fptrunc float %1469 to half, !dbg !60
  %1706 = fptrunc float %1468 to half, !dbg !60
  %1707 = fptrunc float %1467 to half, !dbg !60
  %1708 = fptrunc float %1466 to half, !dbg !60
  %1709 = fptrunc float %1465 to half, !dbg !60
  %1710 = fptrunc float %1464 to half, !dbg !60
  %1711 = fptrunc float %1463 to half, !dbg !60
  %1712 = fptrunc float %1462 to half, !dbg !60
  %1713 = fptrunc float %1461 to half, !dbg !60
  %1714 = fptrunc float %1460 to half, !dbg !60
  %1715 = fptrunc float %1459 to half, !dbg !60
  %1716 = fptrunc float %1458 to half, !dbg !60
  %1717 = fptrunc float %1457 to half, !dbg !60
  %1718 = fptrunc float %1456 to half, !dbg !60
  %1719 = fptrunc float %1455 to half, !dbg !60
  %1720 = fptrunc float %1454 to half, !dbg !60
  %1721 = fptrunc float %1453 to half, !dbg !60
  %1722 = fptrunc float %1452 to half, !dbg !60
  %1723 = fptrunc float %1451 to half, !dbg !60
  %1724 = fptrunc float %1450 to half, !dbg !60
  %1725 = fptrunc float %1449 to half, !dbg !60
  %1726 = fptrunc float %1448 to half, !dbg !60
  %1727 = mul i32 %1598, %9, !dbg !61
  %1728 = mul i32 %1597, %9, !dbg !61
  %1729 = mul i32 %1595, %9, !dbg !61
  %1730 = mul i32 %1593, %9, !dbg !61
  %1731 = mul i32 %1591, %9, !dbg !61
  %1732 = mul i32 %1589, %9, !dbg !61
  %1733 = mul i32 %1587, %9, !dbg !61
  %1734 = mul i32 %1585, %9, !dbg !61
  %1735 = sext i32 %1727 to i64, !dbg !62
  %1736 = getelementptr half, ptr addrspace(1) %2, i64 %1735, !dbg !62
  %1737 = sext i32 %1728 to i64, !dbg !62
  %1738 = getelementptr half, ptr addrspace(1) %2, i64 %1737, !dbg !62
  %1739 = sext i32 %1729 to i64, !dbg !62
  %1740 = getelementptr half, ptr addrspace(1) %2, i64 %1739, !dbg !62
  %1741 = sext i32 %1730 to i64, !dbg !62
  %1742 = getelementptr half, ptr addrspace(1) %2, i64 %1741, !dbg !62
  %1743 = sext i32 %1731 to i64, !dbg !62
  %1744 = getelementptr half, ptr addrspace(1) %2, i64 %1743, !dbg !62
  %1745 = sext i32 %1732 to i64, !dbg !62
  %1746 = getelementptr half, ptr addrspace(1) %2, i64 %1745, !dbg !62
  %1747 = sext i32 %1733 to i64, !dbg !62
  %1748 = getelementptr half, ptr addrspace(1) %2, i64 %1747, !dbg !62
  %1749 = sext i32 %1734 to i64, !dbg !62
  %1750 = getelementptr half, ptr addrspace(1) %2, i64 %1749, !dbg !62
  %1751 = sext i32 %1578 to i64, !dbg !63
  %1752 = getelementptr half, ptr addrspace(1) %1736, i64 %1751, !dbg !63
  %1753 = sext i32 %1581 to i64, !dbg !63
  %1754 = getelementptr half, ptr addrspace(1) %1736, i64 %1753, !dbg !63
  %1755 = sext i32 %1580 to i64, !dbg !63
  %1756 = getelementptr half, ptr addrspace(1) %1736, i64 %1755, !dbg !63
  %1757 = sext i32 %1579 to i64, !dbg !63
  %1758 = getelementptr half, ptr addrspace(1) %1736, i64 %1757, !dbg !63
  %1759 = getelementptr half, ptr addrspace(1) %1738, i64 %1751, !dbg !63
  %1760 = getelementptr half, ptr addrspace(1) %1738, i64 %1753, !dbg !63
  %1761 = getelementptr half, ptr addrspace(1) %1738, i64 %1755, !dbg !63
  %1762 = getelementptr half, ptr addrspace(1) %1738, i64 %1757, !dbg !63
  %1763 = getelementptr half, ptr addrspace(1) %1740, i64 %1751, !dbg !63
  %1764 = getelementptr half, ptr addrspace(1) %1740, i64 %1753, !dbg !63
  %1765 = getelementptr half, ptr addrspace(1) %1740, i64 %1755, !dbg !63
  %1766 = getelementptr half, ptr addrspace(1) %1740, i64 %1757, !dbg !63
  %1767 = getelementptr half, ptr addrspace(1) %1742, i64 %1751, !dbg !63
  %1768 = getelementptr half, ptr addrspace(1) %1742, i64 %1753, !dbg !63
  %1769 = getelementptr half, ptr addrspace(1) %1742, i64 %1755, !dbg !63
  %1770 = getelementptr half, ptr addrspace(1) %1742, i64 %1757, !dbg !63
  %1771 = getelementptr half, ptr addrspace(1) %1744, i64 %1751, !dbg !63
  %1772 = getelementptr half, ptr addrspace(1) %1744, i64 %1753, !dbg !63
  %1773 = getelementptr half, ptr addrspace(1) %1744, i64 %1755, !dbg !63
  %1774 = getelementptr half, ptr addrspace(1) %1744, i64 %1757, !dbg !63
  %1775 = getelementptr half, ptr addrspace(1) %1746, i64 %1751, !dbg !63
  %1776 = getelementptr half, ptr addrspace(1) %1746, i64 %1753, !dbg !63
  %1777 = getelementptr half, ptr addrspace(1) %1746, i64 %1755, !dbg !63
  %1778 = getelementptr half, ptr addrspace(1) %1746, i64 %1757, !dbg !63
  %1779 = getelementptr half, ptr addrspace(1) %1748, i64 %1751, !dbg !63
  %1780 = getelementptr half, ptr addrspace(1) %1748, i64 %1753, !dbg !63
  %1781 = getelementptr half, ptr addrspace(1) %1748, i64 %1755, !dbg !63
  %1782 = getelementptr half, ptr addrspace(1) %1748, i64 %1757, !dbg !63
  %1783 = getelementptr half, ptr addrspace(1) %1750, i64 %1751, !dbg !63
  %1784 = getelementptr half, ptr addrspace(1) %1750, i64 %1753, !dbg !63
  %1785 = getelementptr half, ptr addrspace(1) %1750, i64 %1755, !dbg !63
  %1786 = getelementptr half, ptr addrspace(1) %1750, i64 %1757, !dbg !63
  %1787 = insertelement <4 x half> poison, half %1599, i64 0, !dbg !64
  %1788 = insertelement <4 x half> %1787, half %1600, i64 1, !dbg !64
  %1789 = insertelement <4 x half> %1788, half %1601, i64 2, !dbg !64
  %1790 = insertelement <4 x half> %1789, half %1602, i64 3, !dbg !64
  store <4 x half> %1790, ptr addrspace(1) %1752, align 16, !dbg !64
  %1791 = insertelement <4 x half> poison, half %1603, i64 0, !dbg !64
  %1792 = insertelement <4 x half> %1791, half %1604, i64 1, !dbg !64
  %1793 = insertelement <4 x half> %1792, half %1605, i64 2, !dbg !64
  %1794 = insertelement <4 x half> %1793, half %1606, i64 3, !dbg !64
  store <4 x half> %1794, ptr addrspace(1) %1754, align 16, !dbg !64
  %1795 = insertelement <4 x half> poison, half %1607, i64 0, !dbg !64
  %1796 = insertelement <4 x half> %1795, half %1608, i64 1, !dbg !64
  %1797 = insertelement <4 x half> %1796, half %1609, i64 2, !dbg !64
  %1798 = insertelement <4 x half> %1797, half %1610, i64 3, !dbg !64
  store <4 x half> %1798, ptr addrspace(1) %1756, align 16, !dbg !64
  %1799 = insertelement <4 x half> poison, half %1611, i64 0, !dbg !64
  %1800 = insertelement <4 x half> %1799, half %1612, i64 1, !dbg !64
  %1801 = insertelement <4 x half> %1800, half %1613, i64 2, !dbg !64
  %1802 = insertelement <4 x half> %1801, half %1614, i64 3, !dbg !64
  store <4 x half> %1802, ptr addrspace(1) %1758, align 16, !dbg !64
  %1803 = insertelement <4 x half> poison, half %1615, i64 0, !dbg !64
  %1804 = insertelement <4 x half> %1803, half %1616, i64 1, !dbg !64
  %1805 = insertelement <4 x half> %1804, half %1617, i64 2, !dbg !64
  %1806 = insertelement <4 x half> %1805, half %1618, i64 3, !dbg !64
  store <4 x half> %1806, ptr addrspace(1) %1759, align 16, !dbg !64
  %1807 = insertelement <4 x half> poison, half %1619, i64 0, !dbg !64
  %1808 = insertelement <4 x half> %1807, half %1620, i64 1, !dbg !64
  %1809 = insertelement <4 x half> %1808, half %1621, i64 2, !dbg !64
  %1810 = insertelement <4 x half> %1809, half %1622, i64 3, !dbg !64
  store <4 x half> %1810, ptr addrspace(1) %1760, align 16, !dbg !64
  %1811 = insertelement <4 x half> poison, half %1623, i64 0, !dbg !64
  %1812 = insertelement <4 x half> %1811, half %1624, i64 1, !dbg !64
  %1813 = insertelement <4 x half> %1812, half %1625, i64 2, !dbg !64
  %1814 = insertelement <4 x half> %1813, half %1626, i64 3, !dbg !64
  store <4 x half> %1814, ptr addrspace(1) %1761, align 16, !dbg !64
  %1815 = insertelement <4 x half> poison, half %1627, i64 0, !dbg !64
  %1816 = insertelement <4 x half> %1815, half %1628, i64 1, !dbg !64
  %1817 = insertelement <4 x half> %1816, half %1629, i64 2, !dbg !64
  %1818 = insertelement <4 x half> %1817, half %1630, i64 3, !dbg !64
  store <4 x half> %1818, ptr addrspace(1) %1762, align 16, !dbg !64
  %1819 = insertelement <4 x half> poison, half %1631, i64 0, !dbg !64
  %1820 = insertelement <4 x half> %1819, half %1632, i64 1, !dbg !64
  %1821 = insertelement <4 x half> %1820, half %1633, i64 2, !dbg !64
  %1822 = insertelement <4 x half> %1821, half %1634, i64 3, !dbg !64
  store <4 x half> %1822, ptr addrspace(1) %1763, align 16, !dbg !64
  %1823 = insertelement <4 x half> poison, half %1635, i64 0, !dbg !64
  %1824 = insertelement <4 x half> %1823, half %1636, i64 1, !dbg !64
  %1825 = insertelement <4 x half> %1824, half %1637, i64 2, !dbg !64
  %1826 = insertelement <4 x half> %1825, half %1638, i64 3, !dbg !64
  store <4 x half> %1826, ptr addrspace(1) %1764, align 16, !dbg !64
  %1827 = insertelement <4 x half> poison, half %1639, i64 0, !dbg !64
  %1828 = insertelement <4 x half> %1827, half %1640, i64 1, !dbg !64
  %1829 = insertelement <4 x half> %1828, half %1641, i64 2, !dbg !64
  %1830 = insertelement <4 x half> %1829, half %1642, i64 3, !dbg !64
  store <4 x half> %1830, ptr addrspace(1) %1765, align 16, !dbg !64
  %1831 = insertelement <4 x half> poison, half %1643, i64 0, !dbg !64
  %1832 = insertelement <4 x half> %1831, half %1644, i64 1, !dbg !64
  %1833 = insertelement <4 x half> %1832, half %1645, i64 2, !dbg !64
  %1834 = insertelement <4 x half> %1833, half %1646, i64 3, !dbg !64
  store <4 x half> %1834, ptr addrspace(1) %1766, align 16, !dbg !64
  %1835 = insertelement <4 x half> poison, half %1647, i64 0, !dbg !64
  %1836 = insertelement <4 x half> %1835, half %1648, i64 1, !dbg !64
  %1837 = insertelement <4 x half> %1836, half %1649, i64 2, !dbg !64
  %1838 = insertelement <4 x half> %1837, half %1650, i64 3, !dbg !64
  store <4 x half> %1838, ptr addrspace(1) %1767, align 16, !dbg !64
  %1839 = insertelement <4 x half> poison, half %1651, i64 0, !dbg !64
  %1840 = insertelement <4 x half> %1839, half %1652, i64 1, !dbg !64
  %1841 = insertelement <4 x half> %1840, half %1653, i64 2, !dbg !64
  %1842 = insertelement <4 x half> %1841, half %1654, i64 3, !dbg !64
  store <4 x half> %1842, ptr addrspace(1) %1768, align 16, !dbg !64
  %1843 = insertelement <4 x half> poison, half %1655, i64 0, !dbg !64
  %1844 = insertelement <4 x half> %1843, half %1656, i64 1, !dbg !64
  %1845 = insertelement <4 x half> %1844, half %1657, i64 2, !dbg !64
  %1846 = insertelement <4 x half> %1845, half %1658, i64 3, !dbg !64
  store <4 x half> %1846, ptr addrspace(1) %1769, align 16, !dbg !64
  %1847 = insertelement <4 x half> poison, half %1659, i64 0, !dbg !64
  %1848 = insertelement <4 x half> %1847, half %1660, i64 1, !dbg !64
  %1849 = insertelement <4 x half> %1848, half %1661, i64 2, !dbg !64
  %1850 = insertelement <4 x half> %1849, half %1662, i64 3, !dbg !64
  store <4 x half> %1850, ptr addrspace(1) %1770, align 16, !dbg !64
  %1851 = insertelement <4 x half> poison, half %1663, i64 0, !dbg !64
  %1852 = insertelement <4 x half> %1851, half %1664, i64 1, !dbg !64
  %1853 = insertelement <4 x half> %1852, half %1665, i64 2, !dbg !64
  %1854 = insertelement <4 x half> %1853, half %1666, i64 3, !dbg !64
  store <4 x half> %1854, ptr addrspace(1) %1771, align 16, !dbg !64
  %1855 = insertelement <4 x half> poison, half %1667, i64 0, !dbg !64
  %1856 = insertelement <4 x half> %1855, half %1668, i64 1, !dbg !64
  %1857 = insertelement <4 x half> %1856, half %1669, i64 2, !dbg !64
  %1858 = insertelement <4 x half> %1857, half %1670, i64 3, !dbg !64
  store <4 x half> %1858, ptr addrspace(1) %1772, align 16, !dbg !64
  %1859 = insertelement <4 x half> poison, half %1671, i64 0, !dbg !64
  %1860 = insertelement <4 x half> %1859, half %1672, i64 1, !dbg !64
  %1861 = insertelement <4 x half> %1860, half %1673, i64 2, !dbg !64
  %1862 = insertelement <4 x half> %1861, half %1674, i64 3, !dbg !64
  store <4 x half> %1862, ptr addrspace(1) %1773, align 16, !dbg !64
  %1863 = insertelement <4 x half> poison, half %1675, i64 0, !dbg !64
  %1864 = insertelement <4 x half> %1863, half %1676, i64 1, !dbg !64
  %1865 = insertelement <4 x half> %1864, half %1677, i64 2, !dbg !64
  %1866 = insertelement <4 x half> %1865, half %1678, i64 3, !dbg !64
  store <4 x half> %1866, ptr addrspace(1) %1774, align 16, !dbg !64
  %1867 = insertelement <4 x half> poison, half %1679, i64 0, !dbg !64
  %1868 = insertelement <4 x half> %1867, half %1680, i64 1, !dbg !64
  %1869 = insertelement <4 x half> %1868, half %1681, i64 2, !dbg !64
  %1870 = insertelement <4 x half> %1869, half %1682, i64 3, !dbg !64
  store <4 x half> %1870, ptr addrspace(1) %1775, align 16, !dbg !64
  %1871 = insertelement <4 x half> poison, half %1683, i64 0, !dbg !64
  %1872 = insertelement <4 x half> %1871, half %1684, i64 1, !dbg !64
  %1873 = insertelement <4 x half> %1872, half %1685, i64 2, !dbg !64
  %1874 = insertelement <4 x half> %1873, half %1686, i64 3, !dbg !64
  store <4 x half> %1874, ptr addrspace(1) %1776, align 16, !dbg !64
  %1875 = insertelement <4 x half> poison, half %1687, i64 0, !dbg !64
  %1876 = insertelement <4 x half> %1875, half %1688, i64 1, !dbg !64
  %1877 = insertelement <4 x half> %1876, half %1689, i64 2, !dbg !64
  %1878 = insertelement <4 x half> %1877, half %1690, i64 3, !dbg !64
  store <4 x half> %1878, ptr addrspace(1) %1777, align 16, !dbg !64
  %1879 = insertelement <4 x half> poison, half %1691, i64 0, !dbg !64
  %1880 = insertelement <4 x half> %1879, half %1692, i64 1, !dbg !64
  %1881 = insertelement <4 x half> %1880, half %1693, i64 2, !dbg !64
  %1882 = insertelement <4 x half> %1881, half %1694, i64 3, !dbg !64
  store <4 x half> %1882, ptr addrspace(1) %1778, align 16, !dbg !64
  %1883 = insertelement <4 x half> poison, half %1695, i64 0, !dbg !64
  %1884 = insertelement <4 x half> %1883, half %1696, i64 1, !dbg !64
  %1885 = insertelement <4 x half> %1884, half %1697, i64 2, !dbg !64
  %1886 = insertelement <4 x half> %1885, half %1698, i64 3, !dbg !64
  store <4 x half> %1886, ptr addrspace(1) %1779, align 16, !dbg !64
  %1887 = insertelement <4 x half> poison, half %1699, i64 0, !dbg !64
  %1888 = insertelement <4 x half> %1887, half %1700, i64 1, !dbg !64
  %1889 = insertelement <4 x half> %1888, half %1701, i64 2, !dbg !64
  %1890 = insertelement <4 x half> %1889, half %1702, i64 3, !dbg !64
  store <4 x half> %1890, ptr addrspace(1) %1780, align 16, !dbg !64
  %1891 = insertelement <4 x half> poison, half %1703, i64 0, !dbg !64
  %1892 = insertelement <4 x half> %1891, half %1704, i64 1, !dbg !64
  %1893 = insertelement <4 x half> %1892, half %1705, i64 2, !dbg !64
  %1894 = insertelement <4 x half> %1893, half %1706, i64 3, !dbg !64
  store <4 x half> %1894, ptr addrspace(1) %1781, align 16, !dbg !64
  %1895 = insertelement <4 x half> poison, half %1707, i64 0, !dbg !64
  %1896 = insertelement <4 x half> %1895, half %1708, i64 1, !dbg !64
  %1897 = insertelement <4 x half> %1896, half %1709, i64 2, !dbg !64
  %1898 = insertelement <4 x half> %1897, half %1710, i64 3, !dbg !64
  store <4 x half> %1898, ptr addrspace(1) %1782, align 16, !dbg !64
  %1899 = insertelement <4 x half> poison, half %1711, i64 0, !dbg !64
  %1900 = insertelement <4 x half> %1899, half %1712, i64 1, !dbg !64
  %1901 = insertelement <4 x half> %1900, half %1713, i64 2, !dbg !64
  %1902 = insertelement <4 x half> %1901, half %1714, i64 3, !dbg !64
  store <4 x half> %1902, ptr addrspace(1) %1783, align 16, !dbg !64
  %1903 = insertelement <4 x half> poison, half %1715, i64 0, !dbg !64
  %1904 = insertelement <4 x half> %1903, half %1716, i64 1, !dbg !64
  %1905 = insertelement <4 x half> %1904, half %1717, i64 2, !dbg !64
  %1906 = insertelement <4 x half> %1905, half %1718, i64 3, !dbg !64
  store <4 x half> %1906, ptr addrspace(1) %1784, align 16, !dbg !64
  %1907 = insertelement <4 x half> poison, half %1719, i64 0, !dbg !64
  %1908 = insertelement <4 x half> %1907, half %1720, i64 1, !dbg !64
  %1909 = insertelement <4 x half> %1908, half %1721, i64 2, !dbg !64
  %1910 = insertelement <4 x half> %1909, half %1722, i64 3, !dbg !64
  store <4 x half> %1910, ptr addrspace(1) %1785, align 16, !dbg !64
  %1911 = insertelement <4 x half> poison, half %1723, i64 0, !dbg !64
  %1912 = insertelement <4 x half> %1911, half %1724, i64 1, !dbg !64
  %1913 = insertelement <4 x half> %1912, half %1725, i64 2, !dbg !64
  %1914 = insertelement <4 x half> %1913, half %1726, i64 3, !dbg !64
  store <4 x half> %1914, ptr addrspace(1) %1786, align 16, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <8 x half> @llvm.masked.load.v8f16.p1(ptr addrspace(1) nocapture, i32 immarg, <8 x i1>, <8 x half>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #4

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x16f16(<4 x half>, <4 x half>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #5

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.sched.barrier(i32 immarg) #4

attributes #0 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,512" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="0" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #5 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "gemm_sub.py", directory: "/home/dtanner/repos/rocm_triton/golden_ir")
!4 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 72, type: !5, scopeLine: 72, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 95, column: 24, scope: !4)
!8 = !DILocation(line: 106, column: 27, scope: !4)
!9 = !DILocation(line: 108, column: 35, scope: !4)
!10 = !DILocation(line: 40, column: 22, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !4, file: !12, discriminator: 0)
!12 = !DIFile(filename: "standard.py", directory: "/home/dtanner/repos/triton/python/triton/language")
!13 = !DILocation(line: 98, column: 27, scope: !4)
!14 = !DILocation(line: 40, column: 28, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 114, column: 42, scope: !4)
!16 = !DILocation(line: 115, column: 26, scope: !4)
!17 = !DILocation(line: 116, column: 33, scope: !4)
!18 = !DILocation(line: 118, column: 38, scope: !4)
!19 = !DILocation(line: 40, column: 22, scope: !11, inlinedAt: !20)
!20 = !DILocation(line: 97, column: 27, scope: !4)
!21 = !DILocation(line: 40, column: 28, scope: !11, inlinedAt: !20)
!22 = !DILocation(line: 117, column: 39, scope: !4)
!23 = !DILocation(line: 117, column: 52, scope: !4)
!24 = !DILocation(line: 119, column: 44, scope: !4)
!25 = !DILocation(line: 118, column: 58, scope: !4)
!26 = !DILocation(line: 118, column: 31, scope: !4)
!27 = !DILocation(line: 128, column: 23, scope: !4)
!28 = !DILocation(line: 128, column: 51, scope: !4)
!29 = !DILocation(line: 128, column: 38, scope: !4)
!30 = !DILocation(line: 130, column: 40, scope: !4)
!31 = !DILocation(line: 130, column: 21, scope: !4)
!32 = !DILocation(line: 130, column: 59, scope: !4)
!33 = !DILocation(line: 130, column: 52, scope: !4)
!34 = !DILocation(line: 40, column: 22, scope: !11, inlinedAt: !35)
!35 = !DILocation(line: 138, column: 36, scope: !4)
!36 = !DILocation(line: 138, column: 25, scope: !4)
!37 = !DILocation(line: 140, column: 24, scope: !4)
!38 = !DILocation(line: 131, column: 21, scope: !4)
!39 = !DILocation(line: 129, column: 23, scope: !4)
!40 = !DILocation(line: 129, column: 38, scope: !4)
!41 = !DILocation(line: 131, column: 70, scope: !4)
!42 = !DILocation(line: 131, column: 51, scope: !4)
!43 = !DILocation(line: 141, column: 24, scope: !4)
!44 = !DILocation(line: 87, column: 26, scope: !4)
!45 = !DILocation(line: 87, column: 14, scope: !4)
!46 = !DILocation(line: 90, column: 26, scope: !4)
!47 = !DILocation(line: 90, column: 14, scope: !4)
!48 = !DILocation(line: 91, column: 26, scope: !4)
!49 = !DILocation(line: 91, column: 14, scope: !4)
!50 = !DILocation(line: 93, column: 28, scope: !4)
!51 = !DILocation(line: 93, column: 14, scope: !4)
!52 = !DILocation(line: 121, column: 22, scope: !4)
!53 = !DILocation(line: 121, column: 14, scope: !4)
!54 = !DILocation(line: 122, column: 22, scope: !4)
!55 = !DILocation(line: 122, column: 14, scope: !4)
!56 = !DILocation(line: 40, column: 28, scope: !11, inlinedAt: !35)
!57 = !DILocation(line: 146, column: 18, scope: !4)
!58 = !DILocation(line: 147, column: 18, scope: !4)
!59 = !DILocation(line: 145, column: 33, scope: !4)
!60 = !DILocation(line: 148, column: 23, scope: !4)
!61 = !DILocation(line: 153, column: 33, scope: !4)
!62 = !DILocation(line: 153, column: 21, scope: !4)
!63 = !DILocation(line: 153, column: 52, scope: !4)
!64 = !DILocation(line: 156, column: 25, scope: !4)
!65 = !DILocation(line: 155, column: 4, scope: !4)
